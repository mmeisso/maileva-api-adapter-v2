openapi: 3.0.0
################################################################################
#                              API Information                                 #
################################################################################
info:
  version: "2.0"
  title: Maileva / Authentification
  description: |
  
  
      # Description générale
      
      
        L'authentification aux API Maileva est régie par un serveur d'authentification centrale qui implémente le protocole OAuth2. Le serveur d'authentification délivre des jetons d'accès (*token*). La présente documentation décrit les différentes méthodes pour obetnir un jeton.
        
        Ensuite, lors des appels aux API Maileva, ce jeton d'accès devra être envoyé dans l'entête HTTP Authorization de la requête de la manière suivante :

      ```sh
      Authorization: Bearer <access_token>
      ```


      # Identification des applications clientes

        Pour qu'une application cliente (Site web, application mobile, partenaire) puisse interroger et authentifier des utilisateurs, elle doit s'enregistrer auprès de Maileva afin de pouvoir appeler (au nom de l'utilisateur connecté) les API. Maileva fournit alors un jeu d'identifiants *client_id*, *client_secret* qui permettra à l'application d'être identifiée auprès du serveur OAuth2.

      # Les modes d'authentification OAuth2
      Le protocole OAuth2 prévoit plusieurs modes d'authentification, appelés *grant_type*, suivant les cas d'utilisation.
      
      - Ressource Owner Password Credentials grant_type : ce mode est basé sur un appel serveur à serveur (machine-2-machine ou m2m) sans aucune IHM ni jeu de redirection (l'utilisateur n'étant pas forcément derrière un navigateur). Ce mode est conçu principalement pour des applications riches (dans lesquelles les redirections web ne sont pas évidentes) ou encore pour des applications souhaitant proposer leur propre IHM ou une page d'authentification autre que celle du serveur d'authentification OAuth2 Maileva. Ce mode d'authentification nécessite une qualification de la part de Maileva pour être accessible.
      Cette authentification s'utilise en appelant la méthode `POST /oauth2/token` 
      - Client Credentials grant_type : ce mode peut s'assimiler à l'authentification classique par login et mot de passe (Basic Auth par exemple). Ce mode est adapté aux applications accédant à leurs propres ressources. L'utilisateur et l'application cliente se confondent. Ce mode d'authentification nécessite une qualification de la part de Maileva pour être accessible.
      Cette authentification s'utilise en appelant la méthode `POST /oauth2/token` 


      # Format du jeton
      
        Le jeton d'accès retourné par l'application d'authentification est au format JWT ([JSON Web Token](https://jwt.io/)).
        
        Le format et la taille de ce jeton est succeptible d'évoluer.
        
      # Références
      
        OAuth2 RFC-6749 : https://tools.ietf.org/html/rfc6749
        
        OAuth2 portal : https://oauth.net/2/
        
        Comprendre OAuth2 : http://www.bubblecode.net/fr/2016/01/22/comprendre-oauth2/
        
        jwt.io : https://jwt.io/
        
################################################################################
#                  Host, Base Path, Schemes and Content Types                  #
################################################################################
servers:
  - url: https://connexion.maileva.com/auth/realms/services/protocol/openid-connect
    description:  Production
  - url: https://connexion.sandbox.maileva.net/auth/realms/services/protocol/openid-connect
    description: Sandbox

###########################################################################
#                         Components                                      #
###########################################################################
components:

  schemas:
  
    Authorize:
      type: object
      required:
        - client_id
        - redirect_uri
        - response_type
      properties:
        client_id:
          type: string
          description: Identifiant de l’application
        redirect_uri:
          type: string
          description: URL de redirection de l’application cliente
        state:
          type: string
          description: Identifiant généré par l’application cliente souhaitant identifier son appel (au retour du serveur)
        response_type:
          type: string
          description: Type de réponse (obligatoirement ‘token’)
          enum: 
            - token
  
    Error:
      description: Description de l'erreur
      type: object
      properties:
        code:
          type: string
        message:
          type: string
  
    Errors:
      description: Liste des erreurs
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
  
    Token_Response:
      type: object
      properties:
        access_token:
          type: string
          description: Token d'accès pour accéder aux ressources de l'utilisateur
        expires_in:
          type: integer
          description: Délai d'expiration du token (en secondes)

###############################################################################
#                                   Paths                                     #
###############################################################################

paths:

  /token:
    post:
      description: "Permet d'obtenir un jeton d'authentification OAuth2 utilisant le mode d'authentification `Ressource Owner Password Credentials` ou le mode `Client Credentials`.
      
      
        Mode `Ressource Owner Password Credentials`  
        Le paramètre *grant_type* doit être positionné à *password*.
        Les paramètres *username* et *password* sont obligatoires.
      
      
        Mode `Client Credentials`  
        Le paramètre *grant_type* doit être positionné à *client_credentials*.
        Les paramètres *username* et *password* ne sont pas requis.
        "
      parameters:
        - in: header
          name: Authorization
          description: "Identifiant de l'application et son mot de passe. De la forme Basic base64(client_id:client_secret)"
          required: true
          schema:
            type: string

      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - grant_type
              properties:
                grant_type:
                  description: Mode d’authentification
                  type: string
                  enum:
                    - password
                    - client_credentials
                username:
                  description: Identifiant de l’utilisateur Maileva
                  type: string
                password:
                  description: Mot de passe de l’utilisateur
                  type: string
        
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token_Response'
                examples:
                  application/json: |
                    {
      
                      "access_token": "eyJ0eXBlIjoiSldUIiwiYWxnIjoiSFMyNTYifQ==.eyJpc3MiOiJNYWlsZXZhIE9BdXRoMiIsInN1YiI6InRlc3RjbGllbnQiLCJleHAiOjE0NjY1ODk4MjgxMzYsImlhdCI6MTQ2NjUwMzQyODEzNiwianRpIjoiMmIzNzRhNzItYzg2NC00YmFjLThjYjAtYmQ1MTJkYzM3ZDU5IiwiY29udGV4dCI6eyJ1c2VyIjp7ImxvZ2luIjoidGVzdGNsaWVudCIsImVtYWlsIjoiIiwibGFzdF9uYW1lIjoiVEVTVCIsImZpcnN0X25hbWUiOiJERVZFTE9QUEVNRU5UIn0sImNsaWVudF9pZCI6IjdlYTE1NTgwYmVlZDJhMDRiMWUzMjkwZmZhMzdhMTFhIn19.b5535d8f544e810c32ca78021b39e3cbe22a6150f50f36d9384d4917fba80bb9",
                      "expires_in": "1440000"
                    }        
        400:
          description: (Bad request)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
                examples:
                  application/json: |
                    {
                      "errors": [
                        {
                          "code": "CLIENT_ERROR",
                          "message": "Invalid grant type parameter"
                        }
                      ]
                    }
        401:
          description: (Unauthorized) les identifiants de l'application cliente ou les  identifiants de l'utilisateur sont invalides
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
                examples:
                  application/json: |
                    {
                      "errors": [
                        {
                          "code": "CLIENT_ERROR",
                          "message": "Authentication failed"
                        }
                      ]
                    }
        403:
          description: (Forbidden) l'application cliente n'est pas autorisée ou n'est pas enregistrée sur le mode `Ressource Owner Password Credentials` ou `Client Credentials`
        404:
          description: (Bad Request) un des paramètres requis est manquant
