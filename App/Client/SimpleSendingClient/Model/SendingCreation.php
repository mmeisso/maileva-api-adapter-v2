<?php
/**
 * SendingCreation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MailevaApiAdapter\App\Client\SimpleSendingClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Maileva / Envoi et Suivi de Courriers simples
 *
 * API pour envoyer et suivre des courriers postaux.  Elle comprend les fonctions clés pour :   - créer un envoi,  - ajouter des documents et des destinataires,  - choisir ses options,  - suivre la production.  Pour connaitre les notifications (webhooks) concernées par cette API, consultez la documentation de l'API \"notification_center\".
 *
 * The version of the OpenAPI document: 2.6
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailevaApiAdapter\App\Client\SimpleSendingClient\Model;

use \ArrayAccess;
use \MailevaApiAdapter\App\Client\SimpleSendingClient\ObjectSerializer;

/**
 * SendingCreation Class Doc Comment
 *
 * @category Class
 * @package  MailevaApiAdapter\App\Client\SimpleSendingClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SendingCreation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'sending_creation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'withHealthData' => 'bool',
        'name' => 'string',
        'customId' => 'string',
        'customData' => 'string',
        'colorPrinting' => 'bool',
        'duplexPrinting' => 'bool',
        'optionalAddressSheet' => 'bool',
        'notificationEmail' => 'string',
        'printSenderAddress' => 'bool',
        'senderAddressLine1' => 'string',
        'senderAddressLine2' => 'string',
        'senderAddressLine3' => 'string',
        'senderAddressLine4' => 'string',
        'senderAddressLine5' => 'string',
        'senderAddressLine6' => 'string',
        'senderCountryCode' => '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\CountryCode',
        'archivingDuration' => 'int',
        'returnEnvelope' => '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ReturnEnvelope',
        'envelopeWindowsType' => 'string',
        'postageType' => '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\PostageType',
        'treatUndeliveredMail' => 'bool',
        'notificationTreatUndeliveredMail' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'withHealthData' => null,
        'name' => null,
        'customId' => null,
        'customData' => null,
        'colorPrinting' => null,
        'duplexPrinting' => null,
        'optionalAddressSheet' => null,
        'notificationEmail' => null,
        'printSenderAddress' => null,
        'senderAddressLine1' => null,
        'senderAddressLine2' => null,
        'senderAddressLine3' => null,
        'senderAddressLine4' => null,
        'senderAddressLine5' => null,
        'senderAddressLine6' => null,
        'senderCountryCode' => null,
        'archivingDuration' => null,
        'returnEnvelope' => null,
        'envelopeWindowsType' => null,
        'postageType' => null,
        'treatUndeliveredMail' => null,
        'notificationTreatUndeliveredMail' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'withHealthData' => false,
		'name' => false,
		'customId' => false,
		'customData' => false,
		'colorPrinting' => false,
		'duplexPrinting' => false,
		'optionalAddressSheet' => false,
		'notificationEmail' => false,
		'printSenderAddress' => false,
		'senderAddressLine1' => false,
		'senderAddressLine2' => false,
		'senderAddressLine3' => false,
		'senderAddressLine4' => false,
		'senderAddressLine5' => false,
		'senderAddressLine6' => false,
		'senderCountryCode' => false,
		'archivingDuration' => false,
		'returnEnvelope' => false,
		'envelopeWindowsType' => false,
		'postageType' => false,
		'treatUndeliveredMail' => false,
		'notificationTreatUndeliveredMail' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'withHealthData' => 'with_health_data',
        'name' => 'name',
        'customId' => 'custom_id',
        'customData' => 'custom_data',
        'colorPrinting' => 'color_printing',
        'duplexPrinting' => 'duplex_printing',
        'optionalAddressSheet' => 'optional_address_sheet',
        'notificationEmail' => 'notification_email',
        'printSenderAddress' => 'print_sender_address',
        'senderAddressLine1' => 'sender_address_line_1',
        'senderAddressLine2' => 'sender_address_line_2',
        'senderAddressLine3' => 'sender_address_line_3',
        'senderAddressLine4' => 'sender_address_line_4',
        'senderAddressLine5' => 'sender_address_line_5',
        'senderAddressLine6' => 'sender_address_line_6',
        'senderCountryCode' => 'sender_country_code',
        'archivingDuration' => 'archiving_duration',
        'returnEnvelope' => 'return_envelope',
        'envelopeWindowsType' => 'envelope_windows_type',
        'postageType' => 'postage_type',
        'treatUndeliveredMail' => 'treat_undelivered_mail',
        'notificationTreatUndeliveredMail' => 'notification_treat_undelivered_mail'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'withHealthData' => 'setWithHealthData',
        'name' => 'setName',
        'customId' => 'setCustomId',
        'customData' => 'setCustomData',
        'colorPrinting' => 'setColorPrinting',
        'duplexPrinting' => 'setDuplexPrinting',
        'optionalAddressSheet' => 'setOptionalAddressSheet',
        'notificationEmail' => 'setNotificationEmail',
        'printSenderAddress' => 'setPrintSenderAddress',
        'senderAddressLine1' => 'setSenderAddressLine1',
        'senderAddressLine2' => 'setSenderAddressLine2',
        'senderAddressLine3' => 'setSenderAddressLine3',
        'senderAddressLine4' => 'setSenderAddressLine4',
        'senderAddressLine5' => 'setSenderAddressLine5',
        'senderAddressLine6' => 'setSenderAddressLine6',
        'senderCountryCode' => 'setSenderCountryCode',
        'archivingDuration' => 'setArchivingDuration',
        'returnEnvelope' => 'setReturnEnvelope',
        'envelopeWindowsType' => 'setEnvelopeWindowsType',
        'postageType' => 'setPostageType',
        'treatUndeliveredMail' => 'setTreatUndeliveredMail',
        'notificationTreatUndeliveredMail' => 'setNotificationTreatUndeliveredMail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'withHealthData' => 'getWithHealthData',
        'name' => 'getName',
        'customId' => 'getCustomId',
        'customData' => 'getCustomData',
        'colorPrinting' => 'getColorPrinting',
        'duplexPrinting' => 'getDuplexPrinting',
        'optionalAddressSheet' => 'getOptionalAddressSheet',
        'notificationEmail' => 'getNotificationEmail',
        'printSenderAddress' => 'getPrintSenderAddress',
        'senderAddressLine1' => 'getSenderAddressLine1',
        'senderAddressLine2' => 'getSenderAddressLine2',
        'senderAddressLine3' => 'getSenderAddressLine3',
        'senderAddressLine4' => 'getSenderAddressLine4',
        'senderAddressLine5' => 'getSenderAddressLine5',
        'senderAddressLine6' => 'getSenderAddressLine6',
        'senderCountryCode' => 'getSenderCountryCode',
        'archivingDuration' => 'getArchivingDuration',
        'returnEnvelope' => 'getReturnEnvelope',
        'envelopeWindowsType' => 'getEnvelopeWindowsType',
        'postageType' => 'getPostageType',
        'treatUndeliveredMail' => 'getTreatUndeliveredMail',
        'notificationTreatUndeliveredMail' => 'getNotificationTreatUndeliveredMail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ARCHIVING_DURATION_0 = 0;
    public const ARCHIVING_DURATION_1 = 1;
    public const ARCHIVING_DURATION_3 = 3;
    public const ARCHIVING_DURATION_6 = 6;
    public const ARCHIVING_DURATION_10 = 10;
    public const ENVELOPE_WINDOWS_TYPE_SIMPLE = 'SIMPLE';
    public const ENVELOPE_WINDOWS_TYPE_DOUBLE = 'DOUBLE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getArchivingDurationAllowableValues()
    {
        return [
            self::ARCHIVING_DURATION_0,
            self::ARCHIVING_DURATION_1,
            self::ARCHIVING_DURATION_3,
            self::ARCHIVING_DURATION_6,
            self::ARCHIVING_DURATION_10,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEnvelopeWindowsTypeAllowableValues()
    {
        return [
            self::ENVELOPE_WINDOWS_TYPE_SIMPLE,
            self::ENVELOPE_WINDOWS_TYPE_DOUBLE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('withHealthData', $data ?? [], false);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('customId', $data ?? [], null);
        $this->setIfExists('customData', $data ?? [], null);
        $this->setIfExists('colorPrinting', $data ?? [], true);
        $this->setIfExists('duplexPrinting', $data ?? [], true);
        $this->setIfExists('optionalAddressSheet', $data ?? [], false);
        $this->setIfExists('notificationEmail', $data ?? [], null);
        $this->setIfExists('printSenderAddress', $data ?? [], false);
        $this->setIfExists('senderAddressLine1', $data ?? [], null);
        $this->setIfExists('senderAddressLine2', $data ?? [], null);
        $this->setIfExists('senderAddressLine3', $data ?? [], null);
        $this->setIfExists('senderAddressLine4', $data ?? [], null);
        $this->setIfExists('senderAddressLine5', $data ?? [], null);
        $this->setIfExists('senderAddressLine6', $data ?? [], null);
        $this->setIfExists('senderCountryCode', $data ?? [], null);
        $this->setIfExists('archivingDuration', $data ?? [], self::ARCHIVING_DURATION_0);
        $this->setIfExists('returnEnvelope', $data ?? [], null);
        $this->setIfExists('envelopeWindowsType', $data ?? [], null);
        $this->setIfExists('postageType', $data ?? [], null);
        $this->setIfExists('treatUndeliveredMail', $data ?? [], false);
        $this->setIfExists('notificationTreatUndeliveredMail', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 256)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['customId']) && (mb_strlen($this->container['customId']) > 38)) {
            $invalidProperties[] = "invalid value for 'customId', the character length must be smaller than or equal to 38.";
        }

        if (!is_null($this->container['customData']) && (mb_strlen($this->container['customData']) > 255)) {
            $invalidProperties[] = "invalid value for 'customData', the character length must be smaller than or equal to 255.";
        }

        $allowedValues = $this->getArchivingDurationAllowableValues();
        if (!is_null($this->container['archivingDuration']) && !in_array($this->container['archivingDuration'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'archivingDuration', must be one of '%s'",
                $this->container['archivingDuration'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEnvelopeWindowsTypeAllowableValues();
        if (!is_null($this->container['envelopeWindowsType']) && !in_array($this->container['envelopeWindowsType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'envelopeWindowsType', must be one of '%s'",
                $this->container['envelopeWindowsType'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets withHealthData
     *
     * @return bool|null
     */
    public function getWithHealthData()
    {
        return $this->container['withHealthData'];
    }

    /**
     * Sets withHealthData
     *
     * @param bool|null $withHealthData Cet envoi contient des données de santé.  Attention, vous devez posséder un droit spécifique pour utiliser cette option. Si vous n'avez pas ce droit, votre envoi tombera en erreur.
     *
     * @return self
     */
    public function setWithHealthData($withHealthData)
    {
        if (is_null($withHealthData)) {
            throw new \InvalidArgumentException('non-nullable withHealthData cannot be null');
        }
        $this->container['withHealthData'] = $withHealthData;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Nom de l'envoi
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 256)) {
            throw new \InvalidArgumentException('invalid length for $name when calling SendingCreation., must be smaller than or equal to 256.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling SendingCreation., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets customId
     *
     * @return string|null
     */
    public function getCustomId()
    {
        return $this->container['customId'];
    }

    /**
     * Sets customId
     *
     * @param string|null $customId Identifiant de l'envoi défini par le client
     *
     * @return self
     */
    public function setCustomId($customId)
    {
        if (is_null($customId)) {
            throw new \InvalidArgumentException('non-nullable customId cannot be null');
        }
        if ((mb_strlen($customId) > 38)) {
            throw new \InvalidArgumentException('invalid length for $customId when calling SendingCreation., must be smaller than or equal to 38.');
        }

        $this->container['customId'] = $customId;

        return $this;
    }

    /**
     * Gets customData
     *
     * @return string|null
     */
    public function getCustomData()
    {
        return $this->container['customData'];
    }

    /**
     * Sets customData
     *
     * @param string|null $customData Information libre fournie par le client
     *
     * @return self
     */
    public function setCustomData($customData)
    {
        if (is_null($customData)) {
            throw new \InvalidArgumentException('non-nullable customData cannot be null');
        }
        if ((mb_strlen($customData) > 255)) {
            throw new \InvalidArgumentException('invalid length for $customData when calling SendingCreation., must be smaller than or equal to 255.');
        }

        $this->container['customData'] = $customData;

        return $this;
    }

    /**
     * Gets colorPrinting
     *
     * @return bool|null
     */
    public function getColorPrinting()
    {
        return $this->container['colorPrinting'];
    }

    /**
     * Sets colorPrinting
     *
     * @param bool|null $colorPrinting Impression couleur
     *
     * @return self
     */
    public function setColorPrinting($colorPrinting)
    {
        if (is_null($colorPrinting)) {
            throw new \InvalidArgumentException('non-nullable colorPrinting cannot be null');
        }
        $this->container['colorPrinting'] = $colorPrinting;

        return $this;
    }

    /**
     * Gets duplexPrinting
     *
     * @return bool|null
     */
    public function getDuplexPrinting()
    {
        return $this->container['duplexPrinting'];
    }

    /**
     * Sets duplexPrinting
     *
     * @param bool|null $duplexPrinting Impression recto verso
     *
     * @return self
     */
    public function setDuplexPrinting($duplexPrinting)
    {
        if (is_null($duplexPrinting)) {
            throw new \InvalidArgumentException('non-nullable duplexPrinting cannot be null');
        }
        $this->container['duplexPrinting'] = $duplexPrinting;

        return $this;
    }

    /**
     * Gets optionalAddressSheet
     *
     * @return bool|null
     */
    public function getOptionalAddressSheet()
    {
        return $this->container['optionalAddressSheet'];
    }

    /**
     * Sets optionalAddressSheet
     *
     * @param bool|null $optionalAddressSheet Feuille porte adresse optionnelle
     *
     * @return self
     */
    public function setOptionalAddressSheet($optionalAddressSheet)
    {
        if (is_null($optionalAddressSheet)) {
            throw new \InvalidArgumentException('non-nullable optionalAddressSheet cannot be null');
        }
        $this->container['optionalAddressSheet'] = $optionalAddressSheet;

        return $this;
    }

    /**
     * Gets notificationEmail
     *
     * @return string|null
     */
    public function getNotificationEmail()
    {
        return $this->container['notificationEmail'];
    }

    /**
     * Sets notificationEmail
     *
     * @param string|null $notificationEmail E-mail du destinataire des notifications
     *
     * @return self
     */
    public function setNotificationEmail($notificationEmail)
    {
        if (is_null($notificationEmail)) {
            throw new \InvalidArgumentException('non-nullable notificationEmail cannot be null');
        }
        $this->container['notificationEmail'] = $notificationEmail;

        return $this;
    }

    /**
     * Gets printSenderAddress
     *
     * @return bool|null
     */
    public function getPrintSenderAddress()
    {
        return $this->container['printSenderAddress'];
    }

    /**
     * Sets printSenderAddress
     *
     * @param bool|null $printSenderAddress Impression de l'adresse expéditeur
     *
     * @return self
     */
    public function setPrintSenderAddress($printSenderAddress)
    {
        if (is_null($printSenderAddress)) {
            throw new \InvalidArgumentException('non-nullable printSenderAddress cannot be null');
        }
        $this->container['printSenderAddress'] = $printSenderAddress;

        return $this;
    }

    /**
     * Gets senderAddressLine1
     *
     * @return string|null
     */
    public function getSenderAddressLine1()
    {
        return $this->container['senderAddressLine1'];
    }

    /**
     * Sets senderAddressLine1
     *
     * @param string|null $senderAddressLine1 Ligne d'adresse n°1 (Société) de l'expéditeur
     *
     * @return self
     */
    public function setSenderAddressLine1($senderAddressLine1)
    {
        if (is_null($senderAddressLine1)) {
            throw new \InvalidArgumentException('non-nullable senderAddressLine1 cannot be null');
        }
        $this->container['senderAddressLine1'] = $senderAddressLine1;

        return $this;
    }

    /**
     * Gets senderAddressLine2
     *
     * @return string|null
     */
    public function getSenderAddressLine2()
    {
        return $this->container['senderAddressLine2'];
    }

    /**
     * Sets senderAddressLine2
     *
     * @param string|null $senderAddressLine2 Ligne d'adresse n°2 (Civilité, Prénom, Nom) de l'expéditeur
     *
     * @return self
     */
    public function setSenderAddressLine2($senderAddressLine2)
    {
        if (is_null($senderAddressLine2)) {
            throw new \InvalidArgumentException('non-nullable senderAddressLine2 cannot be null');
        }
        $this->container['senderAddressLine2'] = $senderAddressLine2;

        return $this;
    }

    /**
     * Gets senderAddressLine3
     *
     * @return string|null
     */
    public function getSenderAddressLine3()
    {
        return $this->container['senderAddressLine3'];
    }

    /**
     * Sets senderAddressLine3
     *
     * @param string|null $senderAddressLine3 Ligne d'adresse n°3 (Résidence, Bâtiement ...) de l'expéditeur
     *
     * @return self
     */
    public function setSenderAddressLine3($senderAddressLine3)
    {
        if (is_null($senderAddressLine3)) {
            throw new \InvalidArgumentException('non-nullable senderAddressLine3 cannot be null');
        }
        $this->container['senderAddressLine3'] = $senderAddressLine3;

        return $this;
    }

    /**
     * Gets senderAddressLine4
     *
     * @return string|null
     */
    public function getSenderAddressLine4()
    {
        return $this->container['senderAddressLine4'];
    }

    /**
     * Sets senderAddressLine4
     *
     * @param string|null $senderAddressLine4 Ligne d'adresse n°4 (N° et libellé de la voie) de l'expéditeur
     *
     * @return self
     */
    public function setSenderAddressLine4($senderAddressLine4)
    {
        if (is_null($senderAddressLine4)) {
            throw new \InvalidArgumentException('non-nullable senderAddressLine4 cannot be null');
        }
        $this->container['senderAddressLine4'] = $senderAddressLine4;

        return $this;
    }

    /**
     * Gets senderAddressLine5
     *
     * @return string|null
     */
    public function getSenderAddressLine5()
    {
        return $this->container['senderAddressLine5'];
    }

    /**
     * Sets senderAddressLine5
     *
     * @param string|null $senderAddressLine5 Ligne d'adresse n°5 (Lieu dit, BP...) de l'expéditeur
     *
     * @return self
     */
    public function setSenderAddressLine5($senderAddressLine5)
    {
        if (is_null($senderAddressLine5)) {
            throw new \InvalidArgumentException('non-nullable senderAddressLine5 cannot be null');
        }
        $this->container['senderAddressLine5'] = $senderAddressLine5;

        return $this;
    }

    /**
     * Gets senderAddressLine6
     *
     * @return string|null
     */
    public function getSenderAddressLine6()
    {
        return $this->container['senderAddressLine6'];
    }

    /**
     * Sets senderAddressLine6
     *
     * @param string|null $senderAddressLine6 Ligne d'adresse n°6 (Code postal et ville) de l'expéditeur
     *
     * @return self
     */
    public function setSenderAddressLine6($senderAddressLine6)
    {
        if (is_null($senderAddressLine6)) {
            throw new \InvalidArgumentException('non-nullable senderAddressLine6 cannot be null');
        }
        $this->container['senderAddressLine6'] = $senderAddressLine6;

        return $this;
    }

    /**
     * Gets senderCountryCode
     *
     * @return \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\CountryCode|null
     */
    public function getSenderCountryCode()
    {
        return $this->container['senderCountryCode'];
    }

    /**
     * Sets senderCountryCode
     *
     * @param \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\CountryCode|null $senderCountryCode senderCountryCode
     *
     * @return self
     */
    public function setSenderCountryCode($senderCountryCode)
    {
        if (is_null($senderCountryCode)) {
            throw new \InvalidArgumentException('non-nullable senderCountryCode cannot be null');
        }
        $this->container['senderCountryCode'] = $senderCountryCode;

        return $this;
    }

    /**
     * Gets archivingDuration
     *
     * @return int|null
     */
    public function getArchivingDuration()
    {
        return $this->container['archivingDuration'];
    }

    /**
     * Sets archivingDuration
     *
     * @param int|null $archivingDuration Durée d'archivage en années
     *
     * @return self
     */
    public function setArchivingDuration($archivingDuration)
    {
        if (is_null($archivingDuration)) {
            throw new \InvalidArgumentException('non-nullable archivingDuration cannot be null');
        }
        $allowedValues = $this->getArchivingDurationAllowableValues();
        if (!in_array($archivingDuration, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'archivingDuration', must be one of '%s'",
                    $archivingDuration,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['archivingDuration'] = $archivingDuration;

        return $this;
    }

    /**
     * Gets returnEnvelope
     *
     * @return \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ReturnEnvelope|null
     */
    public function getReturnEnvelope()
    {
        return $this->container['returnEnvelope'];
    }

    /**
     * Sets returnEnvelope
     *
     * @param \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ReturnEnvelope|null $returnEnvelope returnEnvelope
     *
     * @return self
     */
    public function setReturnEnvelope($returnEnvelope)
    {
        if (is_null($returnEnvelope)) {
            throw new \InvalidArgumentException('non-nullable returnEnvelope cannot be null');
        }
        $this->container['returnEnvelope'] = $returnEnvelope;

        return $this;
    }

    /**
     * Gets envelopeWindowsType
     *
     * @return string|null
     */
    public function getEnvelopeWindowsType()
    {
        return $this->container['envelopeWindowsType'];
    }

    /**
     * Sets envelopeWindowsType
     *
     * @param string|null $envelopeWindowsType enveloppe simple ou double fenêtre (si format DL)
     *
     * @return self
     */
    public function setEnvelopeWindowsType($envelopeWindowsType)
    {
        if (is_null($envelopeWindowsType)) {
            throw new \InvalidArgumentException('non-nullable envelopeWindowsType cannot be null');
        }
        $allowedValues = $this->getEnvelopeWindowsTypeAllowableValues();
        if (!in_array($envelopeWindowsType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'envelopeWindowsType', must be one of '%s'",
                    $envelopeWindowsType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['envelopeWindowsType'] = $envelopeWindowsType;

        return $this;
    }

    /**
     * Gets postageType
     *
     * @return \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\PostageType|null
     */
    public function getPostageType()
    {
        return $this->container['postageType'];
    }

    /**
     * Sets postageType
     *
     * @param \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\PostageType|null $postageType postageType
     *
     * @return self
     */
    public function setPostageType($postageType)
    {
        if (is_null($postageType)) {
            throw new \InvalidArgumentException('non-nullable postageType cannot be null');
        }
        $this->container['postageType'] = $postageType;

        return $this;
    }

    /**
     * Gets treatUndeliveredMail
     *
     * @return bool|null
     */
    public function getTreatUndeliveredMail()
    {
        return $this->container['treatUndeliveredMail'];
    }

    /**
     * Sets treatUndeliveredMail
     *
     * @param bool|null $treatUndeliveredMail Gestion électronique des PND
     *
     * @return self
     */
    public function setTreatUndeliveredMail($treatUndeliveredMail)
    {
        if (is_null($treatUndeliveredMail)) {
            throw new \InvalidArgumentException('non-nullable treatUndeliveredMail cannot be null');
        }
        $this->container['treatUndeliveredMail'] = $treatUndeliveredMail;

        return $this;
    }

    /**
     * Gets notificationTreatUndeliveredMail
     *
     * @return string[]|null
     */
    public function getNotificationTreatUndeliveredMail()
    {
        return $this->container['notificationTreatUndeliveredMail'];
    }

    /**
     * Sets notificationTreatUndeliveredMail
     *
     * @param string[]|null $notificationTreatUndeliveredMail Liste des emails de notification des PND
     *
     * @return self
     */
    public function setNotificationTreatUndeliveredMail($notificationTreatUndeliveredMail)
    {
        if (is_null($notificationTreatUndeliveredMail)) {
            throw new \InvalidArgumentException('non-nullable notificationTreatUndeliveredMail cannot be null');
        }
        $this->container['notificationTreatUndeliveredMail'] = $notificationTreatUndeliveredMail;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


