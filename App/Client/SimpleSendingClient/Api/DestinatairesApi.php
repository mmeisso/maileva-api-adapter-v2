<?php
/**
 * DestinatairesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  MailevaApiAdapter\App\Client\SimpleSendingClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Maileva / Envoi et Suivi de Courriers simples
 *
 * API pour envoyer et suivre des courriers postaux.  Elle comprend les fonctions clés pour :   - créer un envoi,  - ajouter des documents et des destinataires,  - choisir ses options,  - suivre la production.  Pour connaitre les notifications (webhooks) concernées par cette API, consultez la documentation de l'API \"notification_center\".
 *
 * The version of the OpenAPI document: 2.6
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailevaApiAdapter\App\Client\SimpleSendingClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use MailevaApiAdapter\App\Client\SimpleSendingClient\ApiException;
use MailevaApiAdapter\App\Client\SimpleSendingClient\Configuration;
use MailevaApiAdapter\App\Client\SimpleSendingClient\HeaderSelector;
use MailevaApiAdapter\App\Client\SimpleSendingClient\ObjectSerializer;

/**
 * DestinatairesApi Class Doc Comment
 *
 * @category Class
 * @package  MailevaApiAdapter\App\Client\SimpleSendingClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DestinatairesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'patchRecipient' => [
            'application/json',
        ],
        'sendingsSendingIdRecipientsDelete' => [
            'application/json',
        ],
        'sendingsSendingIdRecipientsGet' => [
            'application/json',
        ],
        'sendingsSendingIdRecipientsImportsPost' => [
            'application/json',
        ],
        'sendingsSendingIdRecipientsPost' => [
            'application/json',
        ],
        'sendingsSendingIdRecipientsRecipientIdDelete' => [
            'application/json',
        ],
        'sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGet' => [
            'application/json',
        ],
        'sendingsSendingIdRecipientsRecipientIdDownloadArchiveGet' => [
            'application/json',
        ],
        'sendingsSendingIdRecipientsRecipientIdGet' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation patchRecipient
     *
     * Modification partielle d&#39;un destinataire
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $recipientId Identifiant du destinataire (required)
     * @param  \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientCreation $recipientCreation recipientCreation (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchRecipient'] to see the possible values for this operation
     *
     * @throws \MailevaApiAdapter\App\Client\SimpleSendingClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse
     */
    public function patchRecipient($sendingId, $recipientId, $recipientCreation, string $contentType = self::contentTypes['patchRecipient'][0])
    {
        list($response) = $this->patchRecipientWithHttpInfo($sendingId, $recipientId, $recipientCreation, $contentType);
        return $response;
    }

    /**
     * Operation patchRecipientWithHttpInfo
     *
     * Modification partielle d&#39;un destinataire
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $recipientId Identifiant du destinataire (required)
     * @param  \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientCreation $recipientCreation (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchRecipient'] to see the possible values for this operation
     *
     * @throws \MailevaApiAdapter\App\Client\SimpleSendingClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchRecipientWithHttpInfo($sendingId, $recipientId, $recipientCreation, string $contentType = self::contentTypes['patchRecipient'][0])
    {
        $request = $this->patchRecipientRequest($sendingId, $recipientId, $recipientCreation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                    $e
                );
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                    $e
                );
            }


            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchRecipientAsync
     *
     * Modification partielle d&#39;un destinataire
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $recipientId Identifiant du destinataire (required)
     * @param  \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientCreation $recipientCreation (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchRecipient'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchRecipientAsync($sendingId, $recipientId, $recipientCreation, string $contentType = self::contentTypes['patchRecipient'][0])
    {
        return $this->patchRecipientAsyncWithHttpInfo($sendingId, $recipientId, $recipientCreation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchRecipientAsyncWithHttpInfo
     *
     * Modification partielle d&#39;un destinataire
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $recipientId Identifiant du destinataire (required)
     * @param  \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientCreation $recipientCreation (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchRecipient'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchRecipientAsyncWithHttpInfo($sendingId, $recipientId, $recipientCreation, string $contentType = self::contentTypes['patchRecipient'][0])
    {
        $returnType = '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientResponse';
        $request = $this->patchRecipientRequest($sendingId, $recipientId, $recipientCreation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchRecipient'
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $recipientId Identifiant du destinataire (required)
     * @param  \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientCreation $recipientCreation (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchRecipient'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchRecipientRequest($sendingId, $recipientId, $recipientCreation, string $contentType = self::contentTypes['patchRecipient'][0])
    {

        // verify the required parameter 'sendingId' is set
        if ($sendingId === null || (is_array($sendingId) && count($sendingId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sendingId when calling patchRecipient'
            );
        }
        if (strlen($sendingId) > 40) {
            throw new \InvalidArgumentException('invalid length for "$sendingId" when calling DestinatairesApi.patchRecipient, must be smaller than or equal to 40.');
        }
        
        // verify the required parameter 'recipientId' is set
        if ($recipientId === null || (is_array($recipientId) && count($recipientId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recipientId when calling patchRecipient'
            );
        }
        if (strlen($recipientId) > 40) {
            throw new \InvalidArgumentException('invalid length for "$recipientId" when calling DestinatairesApi.patchRecipient, must be smaller than or equal to 40.');
        }
        
        // verify the required parameter 'recipientCreation' is set
        if ($recipientCreation === null || (is_array($recipientCreation) && count($recipientCreation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recipientCreation when calling patchRecipient'
            );
        }


        $resourcePath = '/sendings/{sending_id}/recipients/{recipient_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sendingId !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sendingId),
                $resourcePath
            );
        }
        // path params
        if ($recipientId !== null) {
            $resourcePath = str_replace(
                '{' . 'recipient_id' . '}',
                ObjectSerializer::toPathValue($recipientId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($recipientCreation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($recipientCreation));
            } else {
                $httpBody = $recipientCreation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendingsSendingIdRecipientsDelete
     *
     * Suppression de tous les destinataires
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsDelete'] to see the possible values for this operation
     *
     * @throws \MailevaApiAdapter\App\Client\SimpleSendingClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sendingsSendingIdRecipientsDelete($sendingId, string $contentType = self::contentTypes['sendingsSendingIdRecipientsDelete'][0])
    {
        $this->sendingsSendingIdRecipientsDeleteWithHttpInfo($sendingId, $contentType);
    }

    /**
     * Operation sendingsSendingIdRecipientsDeleteWithHttpInfo
     *
     * Suppression de tous les destinataires
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsDelete'] to see the possible values for this operation
     *
     * @throws \MailevaApiAdapter\App\Client\SimpleSendingClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendingsSendingIdRecipientsDeleteWithHttpInfo($sendingId, string $contentType = self::contentTypes['sendingsSendingIdRecipientsDelete'][0])
    {
        $request = $this->sendingsSendingIdRecipientsDeleteRequest($sendingId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                    $e
                );
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                    $e
                );
            }


            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendingsSendingIdRecipientsDeleteAsync
     *
     * Suppression de tous les destinataires
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsDeleteAsync($sendingId, string $contentType = self::contentTypes['sendingsSendingIdRecipientsDelete'][0])
    {
        return $this->sendingsSendingIdRecipientsDeleteAsyncWithHttpInfo($sendingId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendingsSendingIdRecipientsDeleteAsyncWithHttpInfo
     *
     * Suppression de tous les destinataires
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsDeleteAsyncWithHttpInfo($sendingId, string $contentType = self::contentTypes['sendingsSendingIdRecipientsDelete'][0])
    {
        $returnType = '';
        $request = $this->sendingsSendingIdRecipientsDeleteRequest($sendingId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendingsSendingIdRecipientsDelete'
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendingsSendingIdRecipientsDeleteRequest($sendingId, string $contentType = self::contentTypes['sendingsSendingIdRecipientsDelete'][0])
    {

        // verify the required parameter 'sendingId' is set
        if ($sendingId === null || (is_array($sendingId) && count($sendingId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sendingId when calling sendingsSendingIdRecipientsDelete'
            );
        }
        if (strlen($sendingId) > 40) {
            throw new \InvalidArgumentException('invalid length for "$sendingId" when calling DestinatairesApi.sendingsSendingIdRecipientsDelete, must be smaller than or equal to 40.');
        }
        

        $resourcePath = '/sendings/{sending_id}/recipients';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sendingId !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sendingId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendingsSendingIdRecipientsGet
     *
     * Liste des destinataires d&#39;un envoi
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  float $startIndex Le premier élément à retourner (optional, default to 1)
     * @param  float $count Le nombre d&#39;élément à retourner (optional, default to 50)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsGet'] to see the possible values for this operation
     *
     * @throws \MailevaApiAdapter\App\Client\SimpleSendingClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientsResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse
     */
    public function sendingsSendingIdRecipientsGet($sendingId, $startIndex = 1, $count = 50, string $contentType = self::contentTypes['sendingsSendingIdRecipientsGet'][0])
    {
        list($response) = $this->sendingsSendingIdRecipientsGetWithHttpInfo($sendingId, $startIndex, $count, $contentType);
        return $response;
    }

    /**
     * Operation sendingsSendingIdRecipientsGetWithHttpInfo
     *
     * Liste des destinataires d&#39;un envoi
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  float $startIndex Le premier élément à retourner (optional, default to 1)
     * @param  float $count Le nombre d&#39;élément à retourner (optional, default to 50)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsGet'] to see the possible values for this operation
     *
     * @throws \MailevaApiAdapter\App\Client\SimpleSendingClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientsResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendingsSendingIdRecipientsGetWithHttpInfo($sendingId, $startIndex = 1, $count = 50, string $contentType = self::contentTypes['sendingsSendingIdRecipientsGet'][0])
    {
        $request = $this->sendingsSendingIdRecipientsGetRequest($sendingId, $startIndex, $count, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                    $e
                );
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                    $e
                );
            }


            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendingsSendingIdRecipientsGetAsync
     *
     * Liste des destinataires d&#39;un envoi
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  float $startIndex Le premier élément à retourner (optional, default to 1)
     * @param  float $count Le nombre d&#39;élément à retourner (optional, default to 50)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsGetAsync($sendingId, $startIndex = 1, $count = 50, string $contentType = self::contentTypes['sendingsSendingIdRecipientsGet'][0])
    {
        return $this->sendingsSendingIdRecipientsGetAsyncWithHttpInfo($sendingId, $startIndex, $count, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendingsSendingIdRecipientsGetAsyncWithHttpInfo
     *
     * Liste des destinataires d&#39;un envoi
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  float $startIndex Le premier élément à retourner (optional, default to 1)
     * @param  float $count Le nombre d&#39;élément à retourner (optional, default to 50)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsGetAsyncWithHttpInfo($sendingId, $startIndex = 1, $count = 50, string $contentType = self::contentTypes['sendingsSendingIdRecipientsGet'][0])
    {
        $returnType = '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientsResponse';
        $request = $this->sendingsSendingIdRecipientsGetRequest($sendingId, $startIndex, $count, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendingsSendingIdRecipientsGet'
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  float $startIndex Le premier élément à retourner (optional, default to 1)
     * @param  float $count Le nombre d&#39;élément à retourner (optional, default to 50)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendingsSendingIdRecipientsGetRequest($sendingId, $startIndex = 1, $count = 50, string $contentType = self::contentTypes['sendingsSendingIdRecipientsGet'][0])
    {

        // verify the required parameter 'sendingId' is set
        if ($sendingId === null || (is_array($sendingId) && count($sendingId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sendingId when calling sendingsSendingIdRecipientsGet'
            );
        }
        if (strlen($sendingId) > 40) {
            throw new \InvalidArgumentException('invalid length for "$sendingId" when calling DestinatairesApi.sendingsSendingIdRecipientsGet, must be smaller than or equal to 40.');
        }
        
        
        

        $resourcePath = '/sendings/{sending_id}/recipients';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startIndex,
            'start_index', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($sendingId !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sendingId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendingsSendingIdRecipientsImportsPost
     *
     * Ajout d&#39;un ou de plusieurs destinataires à un envoi
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ImportRecipients $importRecipients importRecipients (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsImportsPost'] to see the possible values for this operation
     *
     * @throws \MailevaApiAdapter\App\Client\SimpleSendingClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientsImportResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse
     */
    public function sendingsSendingIdRecipientsImportsPost($sendingId, $importRecipients = null, string $contentType = self::contentTypes['sendingsSendingIdRecipientsImportsPost'][0])
    {
        list($response) = $this->sendingsSendingIdRecipientsImportsPostWithHttpInfo($sendingId, $importRecipients, $contentType);
        return $response;
    }

    /**
     * Operation sendingsSendingIdRecipientsImportsPostWithHttpInfo
     *
     * Ajout d&#39;un ou de plusieurs destinataires à un envoi
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ImportRecipients $importRecipients (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsImportsPost'] to see the possible values for this operation
     *
     * @throws \MailevaApiAdapter\App\Client\SimpleSendingClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientsImportResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendingsSendingIdRecipientsImportsPostWithHttpInfo($sendingId, $importRecipients = null, string $contentType = self::contentTypes['sendingsSendingIdRecipientsImportsPost'][0])
    {
        $request = $this->sendingsSendingIdRecipientsImportsPostRequest($sendingId, $importRecipients, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                    $e
                );
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                    $e
                );
            }


            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientsImportResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientsImportResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientsImportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientsImportResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientsImportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendingsSendingIdRecipientsImportsPostAsync
     *
     * Ajout d&#39;un ou de plusieurs destinataires à un envoi
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ImportRecipients $importRecipients (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsImportsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsImportsPostAsync($sendingId, $importRecipients = null, string $contentType = self::contentTypes['sendingsSendingIdRecipientsImportsPost'][0])
    {
        return $this->sendingsSendingIdRecipientsImportsPostAsyncWithHttpInfo($sendingId, $importRecipients, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendingsSendingIdRecipientsImportsPostAsyncWithHttpInfo
     *
     * Ajout d&#39;un ou de plusieurs destinataires à un envoi
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ImportRecipients $importRecipients (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsImportsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsImportsPostAsyncWithHttpInfo($sendingId, $importRecipients = null, string $contentType = self::contentTypes['sendingsSendingIdRecipientsImportsPost'][0])
    {
        $returnType = '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientsImportResponse';
        $request = $this->sendingsSendingIdRecipientsImportsPostRequest($sendingId, $importRecipients, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendingsSendingIdRecipientsImportsPost'
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ImportRecipients $importRecipients (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsImportsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendingsSendingIdRecipientsImportsPostRequest($sendingId, $importRecipients = null, string $contentType = self::contentTypes['sendingsSendingIdRecipientsImportsPost'][0])
    {

        // verify the required parameter 'sendingId' is set
        if ($sendingId === null || (is_array($sendingId) && count($sendingId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sendingId when calling sendingsSendingIdRecipientsImportsPost'
            );
        }
        if (strlen($sendingId) > 40) {
            throw new \InvalidArgumentException('invalid length for "$sendingId" when calling DestinatairesApi.sendingsSendingIdRecipientsImportsPost, must be smaller than or equal to 40.');
        }
        


        $resourcePath = '/sendings/{sending_id}/recipients/imports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sendingId !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sendingId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($importRecipients)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($importRecipients));
            } else {
                $httpBody = $importRecipients;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendingsSendingIdRecipientsPost
     *
     * Ajout d&#39;un destinataire à l&#39;envoi
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientCreation $recipientCreation recipientCreation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsPost'] to see the possible values for this operation
     *
     * @throws \MailevaApiAdapter\App\Client\SimpleSendingClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse
     */
    public function sendingsSendingIdRecipientsPost($sendingId, $recipientCreation = null, string $contentType = self::contentTypes['sendingsSendingIdRecipientsPost'][0])
    {
        list($response) = $this->sendingsSendingIdRecipientsPostWithHttpInfo($sendingId, $recipientCreation, $contentType);
        return $response;
    }

    /**
     * Operation sendingsSendingIdRecipientsPostWithHttpInfo
     *
     * Ajout d&#39;un destinataire à l&#39;envoi
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientCreation $recipientCreation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsPost'] to see the possible values for this operation
     *
     * @throws \MailevaApiAdapter\App\Client\SimpleSendingClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendingsSendingIdRecipientsPostWithHttpInfo($sendingId, $recipientCreation = null, string $contentType = self::contentTypes['sendingsSendingIdRecipientsPost'][0])
    {
        $request = $this->sendingsSendingIdRecipientsPostRequest($sendingId, $recipientCreation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                    $e
                );
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                    $e
                );
            }


            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendingsSendingIdRecipientsPostAsync
     *
     * Ajout d&#39;un destinataire à l&#39;envoi
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientCreation $recipientCreation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsPostAsync($sendingId, $recipientCreation = null, string $contentType = self::contentTypes['sendingsSendingIdRecipientsPost'][0])
    {
        return $this->sendingsSendingIdRecipientsPostAsyncWithHttpInfo($sendingId, $recipientCreation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendingsSendingIdRecipientsPostAsyncWithHttpInfo
     *
     * Ajout d&#39;un destinataire à l&#39;envoi
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientCreation $recipientCreation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsPostAsyncWithHttpInfo($sendingId, $recipientCreation = null, string $contentType = self::contentTypes['sendingsSendingIdRecipientsPost'][0])
    {
        $returnType = '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientResponse';
        $request = $this->sendingsSendingIdRecipientsPostRequest($sendingId, $recipientCreation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendingsSendingIdRecipientsPost'
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientCreation $recipientCreation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendingsSendingIdRecipientsPostRequest($sendingId, $recipientCreation = null, string $contentType = self::contentTypes['sendingsSendingIdRecipientsPost'][0])
    {

        // verify the required parameter 'sendingId' is set
        if ($sendingId === null || (is_array($sendingId) && count($sendingId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sendingId when calling sendingsSendingIdRecipientsPost'
            );
        }
        if (strlen($sendingId) > 40) {
            throw new \InvalidArgumentException('invalid length for "$sendingId" when calling DestinatairesApi.sendingsSendingIdRecipientsPost, must be smaller than or equal to 40.');
        }
        


        $resourcePath = '/sendings/{sending_id}/recipients';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sendingId !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sendingId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($recipientCreation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($recipientCreation));
            } else {
                $httpBody = $recipientCreation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdDelete
     *
     * Suprression d&#39;un destinataire
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $recipientId Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsRecipientIdDelete'] to see the possible values for this operation
     *
     * @throws \MailevaApiAdapter\App\Client\SimpleSendingClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sendingsSendingIdRecipientsRecipientIdDelete($sendingId, $recipientId, string $contentType = self::contentTypes['sendingsSendingIdRecipientsRecipientIdDelete'][0])
    {
        $this->sendingsSendingIdRecipientsRecipientIdDeleteWithHttpInfo($sendingId, $recipientId, $contentType);
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdDeleteWithHttpInfo
     *
     * Suprression d&#39;un destinataire
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $recipientId Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsRecipientIdDelete'] to see the possible values for this operation
     *
     * @throws \MailevaApiAdapter\App\Client\SimpleSendingClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendingsSendingIdRecipientsRecipientIdDeleteWithHttpInfo($sendingId, $recipientId, string $contentType = self::contentTypes['sendingsSendingIdRecipientsRecipientIdDelete'][0])
    {
        $request = $this->sendingsSendingIdRecipientsRecipientIdDeleteRequest($sendingId, $recipientId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                    $e
                );
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                    $e
                );
            }


            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdDeleteAsync
     *
     * Suprression d&#39;un destinataire
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $recipientId Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsRecipientIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsRecipientIdDeleteAsync($sendingId, $recipientId, string $contentType = self::contentTypes['sendingsSendingIdRecipientsRecipientIdDelete'][0])
    {
        return $this->sendingsSendingIdRecipientsRecipientIdDeleteAsyncWithHttpInfo($sendingId, $recipientId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdDeleteAsyncWithHttpInfo
     *
     * Suprression d&#39;un destinataire
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $recipientId Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsRecipientIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsRecipientIdDeleteAsyncWithHttpInfo($sendingId, $recipientId, string $contentType = self::contentTypes['sendingsSendingIdRecipientsRecipientIdDelete'][0])
    {
        $returnType = '';
        $request = $this->sendingsSendingIdRecipientsRecipientIdDeleteRequest($sendingId, $recipientId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendingsSendingIdRecipientsRecipientIdDelete'
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $recipientId Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsRecipientIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendingsSendingIdRecipientsRecipientIdDeleteRequest($sendingId, $recipientId, string $contentType = self::contentTypes['sendingsSendingIdRecipientsRecipientIdDelete'][0])
    {

        // verify the required parameter 'sendingId' is set
        if ($sendingId === null || (is_array($sendingId) && count($sendingId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sendingId when calling sendingsSendingIdRecipientsRecipientIdDelete'
            );
        }
        if (strlen($sendingId) > 40) {
            throw new \InvalidArgumentException('invalid length for "$sendingId" when calling DestinatairesApi.sendingsSendingIdRecipientsRecipientIdDelete, must be smaller than or equal to 40.');
        }
        
        // verify the required parameter 'recipientId' is set
        if ($recipientId === null || (is_array($recipientId) && count($recipientId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recipientId when calling sendingsSendingIdRecipientsRecipientIdDelete'
            );
        }
        if (strlen($recipientId) > 40) {
            throw new \InvalidArgumentException('invalid length for "$recipientId" when calling DestinatairesApi.sendingsSendingIdRecipientsRecipientIdDelete, must be smaller than or equal to 40.');
        }
        

        $resourcePath = '/sendings/{sending_id}/recipients/{recipient_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sendingId !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sendingId),
                $resourcePath
            );
        }
        // path params
        if ($recipientId !== null) {
            $resourcePath = str_replace(
                '{' . 'recipient_id' . '}',
                ObjectSerializer::toPathValue($recipientId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGet
     *
     * Liste des statuts de distribution d&#39;un destinataire
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $recipientId Identifiant du destinataire (required)
     * @param  float $startIndex Le premier élément à retourner (optional, default to 1)
     * @param  float $count Le nombre d&#39;élément à retourner (optional, default to 50)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGet'] to see the possible values for this operation
     *
     * @throws \MailevaApiAdapter\App\Client\SimpleSendingClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\DeliveryStatusesResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse
     */
    public function sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGet($sendingId, $recipientId, $startIndex = 1, $count = 50, string $contentType = self::contentTypes['sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGet'][0])
    {
        list($response) = $this->sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGetWithHttpInfo($sendingId, $recipientId, $startIndex, $count, $contentType);
        return $response;
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGetWithHttpInfo
     *
     * Liste des statuts de distribution d&#39;un destinataire
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $recipientId Identifiant du destinataire (required)
     * @param  float $startIndex Le premier élément à retourner (optional, default to 1)
     * @param  float $count Le nombre d&#39;élément à retourner (optional, default to 50)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGet'] to see the possible values for this operation
     *
     * @throws \MailevaApiAdapter\App\Client\SimpleSendingClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\DeliveryStatusesResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGetWithHttpInfo($sendingId, $recipientId, $startIndex = 1, $count = 50, string $contentType = self::contentTypes['sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGet'][0])
    {
        $request = $this->sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGetRequest($sendingId, $recipientId, $startIndex, $count, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                    $e
                );
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                    $e
                );
            }


            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\DeliveryStatusesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\DeliveryStatusesResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\DeliveryStatusesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\DeliveryStatusesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\DeliveryStatusesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGetAsync
     *
     * Liste des statuts de distribution d&#39;un destinataire
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $recipientId Identifiant du destinataire (required)
     * @param  float $startIndex Le premier élément à retourner (optional, default to 1)
     * @param  float $count Le nombre d&#39;élément à retourner (optional, default to 50)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGetAsync($sendingId, $recipientId, $startIndex = 1, $count = 50, string $contentType = self::contentTypes['sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGet'][0])
    {
        return $this->sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGetAsyncWithHttpInfo($sendingId, $recipientId, $startIndex, $count, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGetAsyncWithHttpInfo
     *
     * Liste des statuts de distribution d&#39;un destinataire
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $recipientId Identifiant du destinataire (required)
     * @param  float $startIndex Le premier élément à retourner (optional, default to 1)
     * @param  float $count Le nombre d&#39;élément à retourner (optional, default to 50)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGetAsyncWithHttpInfo($sendingId, $recipientId, $startIndex = 1, $count = 50, string $contentType = self::contentTypes['sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGet'][0])
    {
        $returnType = '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\DeliveryStatusesResponse';
        $request = $this->sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGetRequest($sendingId, $recipientId, $startIndex, $count, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGet'
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $recipientId Identifiant du destinataire (required)
     * @param  float $startIndex Le premier élément à retourner (optional, default to 1)
     * @param  float $count Le nombre d&#39;élément à retourner (optional, default to 50)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGetRequest($sendingId, $recipientId, $startIndex = 1, $count = 50, string $contentType = self::contentTypes['sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGet'][0])
    {

        // verify the required parameter 'sendingId' is set
        if ($sendingId === null || (is_array($sendingId) && count($sendingId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sendingId when calling sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGet'
            );
        }
        if (strlen($sendingId) > 40) {
            throw new \InvalidArgumentException('invalid length for "$sendingId" when calling DestinatairesApi.sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGet, must be smaller than or equal to 40.');
        }
        
        // verify the required parameter 'recipientId' is set
        if ($recipientId === null || (is_array($recipientId) && count($recipientId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recipientId when calling sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGet'
            );
        }
        if (strlen($recipientId) > 40) {
            throw new \InvalidArgumentException('invalid length for "$recipientId" when calling DestinatairesApi.sendingsSendingIdRecipientsRecipientIdDeliveryStatusesGet, must be smaller than or equal to 40.');
        }
        
        
        

        $resourcePath = '/sendings/{sending_id}/recipients/{recipient_id}/delivery_statuses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startIndex,
            'start_index', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($sendingId !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sendingId),
                $resourcePath
            );
        }
        // path params
        if ($recipientId !== null) {
            $resourcePath = str_replace(
                '{' . 'recipient_id' . '}',
                ObjectSerializer::toPathValue($recipientId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdDownloadArchiveGet
     *
     * Téléchargement du courrier envoyé au destinataire
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $recipientId Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsRecipientIdDownloadArchiveGet'] to see the possible values for this operation
     *
     * @throws \MailevaApiAdapter\App\Client\SimpleSendingClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse
     */
    public function sendingsSendingIdRecipientsRecipientIdDownloadArchiveGet($sendingId, $recipientId, string $contentType = self::contentTypes['sendingsSendingIdRecipientsRecipientIdDownloadArchiveGet'][0])
    {
        list($response) = $this->sendingsSendingIdRecipientsRecipientIdDownloadArchiveGetWithHttpInfo($sendingId, $recipientId, $contentType);
        return $response;
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdDownloadArchiveGetWithHttpInfo
     *
     * Téléchargement du courrier envoyé au destinataire
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $recipientId Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsRecipientIdDownloadArchiveGet'] to see the possible values for this operation
     *
     * @throws \MailevaApiAdapter\App\Client\SimpleSendingClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendingsSendingIdRecipientsRecipientIdDownloadArchiveGetWithHttpInfo($sendingId, $recipientId, string $contentType = self::contentTypes['sendingsSendingIdRecipientsRecipientIdDownloadArchiveGet'][0])
    {
        $request = $this->sendingsSendingIdRecipientsRecipientIdDownloadArchiveGetRequest($sendingId, $recipientId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                    $e
                );
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                    $e
                );
            }


            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdDownloadArchiveGetAsync
     *
     * Téléchargement du courrier envoyé au destinataire
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $recipientId Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsRecipientIdDownloadArchiveGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsRecipientIdDownloadArchiveGetAsync($sendingId, $recipientId, string $contentType = self::contentTypes['sendingsSendingIdRecipientsRecipientIdDownloadArchiveGet'][0])
    {
        return $this->sendingsSendingIdRecipientsRecipientIdDownloadArchiveGetAsyncWithHttpInfo($sendingId, $recipientId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdDownloadArchiveGetAsyncWithHttpInfo
     *
     * Téléchargement du courrier envoyé au destinataire
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $recipientId Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsRecipientIdDownloadArchiveGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsRecipientIdDownloadArchiveGetAsyncWithHttpInfo($sendingId, $recipientId, string $contentType = self::contentTypes['sendingsSendingIdRecipientsRecipientIdDownloadArchiveGet'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->sendingsSendingIdRecipientsRecipientIdDownloadArchiveGetRequest($sendingId, $recipientId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendingsSendingIdRecipientsRecipientIdDownloadArchiveGet'
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $recipientId Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsRecipientIdDownloadArchiveGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendingsSendingIdRecipientsRecipientIdDownloadArchiveGetRequest($sendingId, $recipientId, string $contentType = self::contentTypes['sendingsSendingIdRecipientsRecipientIdDownloadArchiveGet'][0])
    {

        // verify the required parameter 'sendingId' is set
        if ($sendingId === null || (is_array($sendingId) && count($sendingId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sendingId when calling sendingsSendingIdRecipientsRecipientIdDownloadArchiveGet'
            );
        }
        if (strlen($sendingId) > 40) {
            throw new \InvalidArgumentException('invalid length for "$sendingId" when calling DestinatairesApi.sendingsSendingIdRecipientsRecipientIdDownloadArchiveGet, must be smaller than or equal to 40.');
        }
        
        // verify the required parameter 'recipientId' is set
        if ($recipientId === null || (is_array($recipientId) && count($recipientId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recipientId when calling sendingsSendingIdRecipientsRecipientIdDownloadArchiveGet'
            );
        }
        if (strlen($recipientId) > 40) {
            throw new \InvalidArgumentException('invalid length for "$recipientId" when calling DestinatairesApi.sendingsSendingIdRecipientsRecipientIdDownloadArchiveGet, must be smaller than or equal to 40.');
        }
        

        $resourcePath = '/sendings/{sending_id}/recipients/{recipient_id}/download_archive';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sendingId !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sendingId),
                $resourcePath
            );
        }
        // path params
        if ($recipientId !== null) {
            $resourcePath = str_replace(
                '{' . 'recipient_id' . '}',
                ObjectSerializer::toPathValue($recipientId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/zip', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdGet
     *
     * Détail d&#39;un destinataire
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $recipientId Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsRecipientIdGet'] to see the possible values for this operation
     *
     * @throws \MailevaApiAdapter\App\Client\SimpleSendingClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse
     */
    public function sendingsSendingIdRecipientsRecipientIdGet($sendingId, $recipientId, string $contentType = self::contentTypes['sendingsSendingIdRecipientsRecipientIdGet'][0])
    {
        list($response) = $this->sendingsSendingIdRecipientsRecipientIdGetWithHttpInfo($sendingId, $recipientId, $contentType);
        return $response;
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdGetWithHttpInfo
     *
     * Détail d&#39;un destinataire
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $recipientId Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsRecipientIdGet'] to see the possible values for this operation
     *
     * @throws \MailevaApiAdapter\App\Client\SimpleSendingClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse|\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendingsSendingIdRecipientsRecipientIdGetWithHttpInfo($sendingId, $recipientId, string $contentType = self::contentTypes['sendingsSendingIdRecipientsRecipientIdGet'][0])
    {
        $request = $this->sendingsSendingIdRecipientsRecipientIdGetRequest($sendingId, $recipientId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null,
                    $e
                );
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null,
                    $e
                );
            }


            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdGetAsync
     *
     * Détail d&#39;un destinataire
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $recipientId Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsRecipientIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsRecipientIdGetAsync($sendingId, $recipientId, string $contentType = self::contentTypes['sendingsSendingIdRecipientsRecipientIdGet'][0])
    {
        return $this->sendingsSendingIdRecipientsRecipientIdGetAsyncWithHttpInfo($sendingId, $recipientId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendingsSendingIdRecipientsRecipientIdGetAsyncWithHttpInfo
     *
     * Détail d&#39;un destinataire
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $recipientId Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsRecipientIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdRecipientsRecipientIdGetAsyncWithHttpInfo($sendingId, $recipientId, string $contentType = self::contentTypes['sendingsSendingIdRecipientsRecipientIdGet'][0])
    {
        $returnType = '\MailevaApiAdapter\App\Client\SimpleSendingClient\Model\RecipientResponse';
        $request = $this->sendingsSendingIdRecipientsRecipientIdGetRequest($sendingId, $recipientId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendingsSendingIdRecipientsRecipientIdGet'
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $recipientId Identifiant du destinataire (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdRecipientsRecipientIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendingsSendingIdRecipientsRecipientIdGetRequest($sendingId, $recipientId, string $contentType = self::contentTypes['sendingsSendingIdRecipientsRecipientIdGet'][0])
    {

        // verify the required parameter 'sendingId' is set
        if ($sendingId === null || (is_array($sendingId) && count($sendingId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sendingId when calling sendingsSendingIdRecipientsRecipientIdGet'
            );
        }
        if (strlen($sendingId) > 40) {
            throw new \InvalidArgumentException('invalid length for "$sendingId" when calling DestinatairesApi.sendingsSendingIdRecipientsRecipientIdGet, must be smaller than or equal to 40.');
        }
        
        // verify the required parameter 'recipientId' is set
        if ($recipientId === null || (is_array($recipientId) && count($recipientId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recipientId when calling sendingsSendingIdRecipientsRecipientIdGet'
            );
        }
        if (strlen($recipientId) > 40) {
            throw new \InvalidArgumentException('invalid length for "$recipientId" when calling DestinatairesApi.sendingsSendingIdRecipientsRecipientIdGet, must be smaller than or equal to 40.');
        }
        

        $resourcePath = '/sendings/{sending_id}/recipients/{recipient_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sendingId !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sendingId),
                $resourcePath
            );
        }
        // path params
        if ($recipientId !== null) {
            $resourcePath = str_replace(
                '{' . 'recipient_id' . '}',
                ObjectSerializer::toPathValue($recipientId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
