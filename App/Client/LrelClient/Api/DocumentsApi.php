<?php
/**
 * DocumentsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  MailevaApiAdapter\App\Client\LrelClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Maileva / Envoi et Suivi de Lettres Recommandées En Ligne distribuées par le facteur
 *
 * API pour envoyer et suivre des Lettres Recommandées En Ligne distribuées par le facteur  Elle comprend les fonctions clés pour :   - créer un envoi,  - ajouter des documents et des destinataires,  - choisir ses options,  - suivre la production.  Pour connaitre les notifications (webhooks) concernées par cette API, consultez la documentation de l'API \"notification_center\".
 *
 * The version of the OpenAPI document: 2.5
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailevaApiAdapter\App\Client\LrelClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use MailevaApiAdapter\App\Client\LrelClient\ApiException;
use MailevaApiAdapter\App\Client\LrelClient\Configuration;
use MailevaApiAdapter\App\Client\LrelClient\HeaderSelector;
use MailevaApiAdapter\App\Client\LrelClient\ObjectSerializer;

/**
 * DocumentsApi Class Doc Comment
 *
 * @category Class
 * @package  MailevaApiAdapter\App\Client\LrelClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DocumentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'sendingsSendingIdDocumentsDocumentIdDelete' => [
            'application/json',
        ],
        'sendingsSendingIdDocumentsDocumentIdGet' => [
            'application/json',
        ],
        'sendingsSendingIdDocumentsDocumentIdSetPriorityPost' => [
            'application/json',
        ],
        'sendingsSendingIdDocumentsGet' => [
            'application/json',
        ],
        'sendingsSendingIdDocumentsPost' => [
            'multipart/form-data',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation sendingsSendingIdDocumentsDocumentIdDelete
     *
     * Suppression d&#39;un document
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $documentId Identifiant du document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdDocumentsDocumentIdDelete'] to see the possible values for this operation
     *
     * @throws \MailevaApiAdapter\App\Client\LrelClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sendingsSendingIdDocumentsDocumentIdDelete($sendingId, $documentId, string $contentType = self::contentTypes['sendingsSendingIdDocumentsDocumentIdDelete'][0])
    {
        $this->sendingsSendingIdDocumentsDocumentIdDeleteWithHttpInfo($sendingId, $documentId, $contentType);
    }

    /**
     * Operation sendingsSendingIdDocumentsDocumentIdDeleteWithHttpInfo
     *
     * Suppression d&#39;un document
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $documentId Identifiant du document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdDocumentsDocumentIdDelete'] to see the possible values for this operation
     *
     * @throws \MailevaApiAdapter\App\Client\LrelClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendingsSendingIdDocumentsDocumentIdDeleteWithHttpInfo($sendingId, $documentId, string $contentType = self::contentTypes['sendingsSendingIdDocumentsDocumentIdDelete'][0])
    {
        $request = $this->sendingsSendingIdDocumentsDocumentIdDeleteRequest($sendingId, $documentId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendingsSendingIdDocumentsDocumentIdDeleteAsync
     *
     * Suppression d&#39;un document
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $documentId Identifiant du document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdDocumentsDocumentIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdDocumentsDocumentIdDeleteAsync($sendingId, $documentId, string $contentType = self::contentTypes['sendingsSendingIdDocumentsDocumentIdDelete'][0])
    {
        return $this->sendingsSendingIdDocumentsDocumentIdDeleteAsyncWithHttpInfo($sendingId, $documentId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendingsSendingIdDocumentsDocumentIdDeleteAsyncWithHttpInfo
     *
     * Suppression d&#39;un document
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $documentId Identifiant du document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdDocumentsDocumentIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdDocumentsDocumentIdDeleteAsyncWithHttpInfo($sendingId, $documentId, string $contentType = self::contentTypes['sendingsSendingIdDocumentsDocumentIdDelete'][0])
    {
        $returnType = '';
        $request = $this->sendingsSendingIdDocumentsDocumentIdDeleteRequest($sendingId, $documentId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendingsSendingIdDocumentsDocumentIdDelete'
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $documentId Identifiant du document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdDocumentsDocumentIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendingsSendingIdDocumentsDocumentIdDeleteRequest($sendingId, $documentId, string $contentType = self::contentTypes['sendingsSendingIdDocumentsDocumentIdDelete'][0])
    {

        // verify the required parameter 'sendingId' is set
        if ($sendingId === null || (is_array($sendingId) && count($sendingId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sendingId when calling sendingsSendingIdDocumentsDocumentIdDelete'
            );
        }
        if (strlen($sendingId) > 40) {
            throw new \InvalidArgumentException('invalid length for "$sendingId" when calling DocumentsApi.sendingsSendingIdDocumentsDocumentIdDelete, must be smaller than or equal to 40.');
        }
        
        // verify the required parameter 'documentId' is set
        if ($documentId === null || (is_array($documentId) && count($documentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $documentId when calling sendingsSendingIdDocumentsDocumentIdDelete'
            );
        }
        if (strlen($documentId) > 40) {
            throw new \InvalidArgumentException('invalid length for "$documentId" when calling DocumentsApi.sendingsSendingIdDocumentsDocumentIdDelete, must be smaller than or equal to 40.');
        }
        

        $resourcePath = '/sendings/{sending_id}/documents/{document_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sendingId !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sendingId),
                $resourcePath
            );
        }
        // path params
        if ($documentId !== null) {
            $resourcePath = str_replace(
                '{' . 'document_id' . '}',
                ObjectSerializer::toPathValue($documentId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendingsSendingIdDocumentsDocumentIdGet
     *
     * Détail d&#39;un document
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $documentId Identifiant du document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdDocumentsDocumentIdGet'] to see the possible values for this operation
     *
     * @throws \MailevaApiAdapter\App\Client\LrelClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailevaApiAdapter\App\Client\LrelClient\Model\DocumentResponse|\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorsResponse|\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse|\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse
     */
    public function sendingsSendingIdDocumentsDocumentIdGet($sendingId, $documentId, string $contentType = self::contentTypes['sendingsSendingIdDocumentsDocumentIdGet'][0])
    {
        list($response) = $this->sendingsSendingIdDocumentsDocumentIdGetWithHttpInfo($sendingId, $documentId, $contentType);
        return $response;
    }

    /**
     * Operation sendingsSendingIdDocumentsDocumentIdGetWithHttpInfo
     *
     * Détail d&#39;un document
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $documentId Identifiant du document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdDocumentsDocumentIdGet'] to see the possible values for this operation
     *
     * @throws \MailevaApiAdapter\App\Client\LrelClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailevaApiAdapter\App\Client\LrelClient\Model\DocumentResponse|\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorsResponse|\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse|\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendingsSendingIdDocumentsDocumentIdGetWithHttpInfo($sendingId, $documentId, string $contentType = self::contentTypes['sendingsSendingIdDocumentsDocumentIdGet'][0])
    {
        $request = $this->sendingsSendingIdDocumentsDocumentIdGetRequest($sendingId, $documentId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MailevaApiAdapter\App\Client\LrelClient\Model\DocumentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\LrelClient\Model\DocumentResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\LrelClient\Model\DocumentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MailevaApiAdapter\App\Client\LrelClient\Model\DocumentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\LrelClient\Model\DocumentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendingsSendingIdDocumentsDocumentIdGetAsync
     *
     * Détail d&#39;un document
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $documentId Identifiant du document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdDocumentsDocumentIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdDocumentsDocumentIdGetAsync($sendingId, $documentId, string $contentType = self::contentTypes['sendingsSendingIdDocumentsDocumentIdGet'][0])
    {
        return $this->sendingsSendingIdDocumentsDocumentIdGetAsyncWithHttpInfo($sendingId, $documentId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendingsSendingIdDocumentsDocumentIdGetAsyncWithHttpInfo
     *
     * Détail d&#39;un document
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $documentId Identifiant du document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdDocumentsDocumentIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdDocumentsDocumentIdGetAsyncWithHttpInfo($sendingId, $documentId, string $contentType = self::contentTypes['sendingsSendingIdDocumentsDocumentIdGet'][0])
    {
        $returnType = '\MailevaApiAdapter\App\Client\LrelClient\Model\DocumentResponse';
        $request = $this->sendingsSendingIdDocumentsDocumentIdGetRequest($sendingId, $documentId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendingsSendingIdDocumentsDocumentIdGet'
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $documentId Identifiant du document (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdDocumentsDocumentIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendingsSendingIdDocumentsDocumentIdGetRequest($sendingId, $documentId, string $contentType = self::contentTypes['sendingsSendingIdDocumentsDocumentIdGet'][0])
    {

        // verify the required parameter 'sendingId' is set
        if ($sendingId === null || (is_array($sendingId) && count($sendingId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sendingId when calling sendingsSendingIdDocumentsDocumentIdGet'
            );
        }
        if (strlen($sendingId) > 40) {
            throw new \InvalidArgumentException('invalid length for "$sendingId" when calling DocumentsApi.sendingsSendingIdDocumentsDocumentIdGet, must be smaller than or equal to 40.');
        }
        
        // verify the required parameter 'documentId' is set
        if ($documentId === null || (is_array($documentId) && count($documentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $documentId when calling sendingsSendingIdDocumentsDocumentIdGet'
            );
        }
        if (strlen($documentId) > 40) {
            throw new \InvalidArgumentException('invalid length for "$documentId" when calling DocumentsApi.sendingsSendingIdDocumentsDocumentIdGet, must be smaller than or equal to 40.');
        }
        

        $resourcePath = '/sendings/{sending_id}/documents/{document_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sendingId !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sendingId),
                $resourcePath
            );
        }
        // path params
        if ($documentId !== null) {
            $resourcePath = str_replace(
                '{' . 'document_id' . '}',
                ObjectSerializer::toPathValue($documentId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendingsSendingIdDocumentsDocumentIdSetPriorityPost
     *
     * Classement des documents
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $documentId Identifiant du document (required)
     * @param  \MailevaApiAdapter\App\Client\LrelClient\Model\Priority $priority priority (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdDocumentsDocumentIdSetPriorityPost'] to see the possible values for this operation
     *
     * @throws \MailevaApiAdapter\App\Client\LrelClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sendingsSendingIdDocumentsDocumentIdSetPriorityPost($sendingId, $documentId, $priority = null, string $contentType = self::contentTypes['sendingsSendingIdDocumentsDocumentIdSetPriorityPost'][0])
    {
        $this->sendingsSendingIdDocumentsDocumentIdSetPriorityPostWithHttpInfo($sendingId, $documentId, $priority, $contentType);
    }

    /**
     * Operation sendingsSendingIdDocumentsDocumentIdSetPriorityPostWithHttpInfo
     *
     * Classement des documents
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $documentId Identifiant du document (required)
     * @param  \MailevaApiAdapter\App\Client\LrelClient\Model\Priority $priority (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdDocumentsDocumentIdSetPriorityPost'] to see the possible values for this operation
     *
     * @throws \MailevaApiAdapter\App\Client\LrelClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendingsSendingIdDocumentsDocumentIdSetPriorityPostWithHttpInfo($sendingId, $documentId, $priority = null, string $contentType = self::contentTypes['sendingsSendingIdDocumentsDocumentIdSetPriorityPost'][0])
    {
        $request = $this->sendingsSendingIdDocumentsDocumentIdSetPriorityPostRequest($sendingId, $documentId, $priority, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendingsSendingIdDocumentsDocumentIdSetPriorityPostAsync
     *
     * Classement des documents
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $documentId Identifiant du document (required)
     * @param  \MailevaApiAdapter\App\Client\LrelClient\Model\Priority $priority (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdDocumentsDocumentIdSetPriorityPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdDocumentsDocumentIdSetPriorityPostAsync($sendingId, $documentId, $priority = null, string $contentType = self::contentTypes['sendingsSendingIdDocumentsDocumentIdSetPriorityPost'][0])
    {
        return $this->sendingsSendingIdDocumentsDocumentIdSetPriorityPostAsyncWithHttpInfo($sendingId, $documentId, $priority, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendingsSendingIdDocumentsDocumentIdSetPriorityPostAsyncWithHttpInfo
     *
     * Classement des documents
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $documentId Identifiant du document (required)
     * @param  \MailevaApiAdapter\App\Client\LrelClient\Model\Priority $priority (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdDocumentsDocumentIdSetPriorityPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdDocumentsDocumentIdSetPriorityPostAsyncWithHttpInfo($sendingId, $documentId, $priority = null, string $contentType = self::contentTypes['sendingsSendingIdDocumentsDocumentIdSetPriorityPost'][0])
    {
        $returnType = '';
        $request = $this->sendingsSendingIdDocumentsDocumentIdSetPriorityPostRequest($sendingId, $documentId, $priority, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendingsSendingIdDocumentsDocumentIdSetPriorityPost'
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  string $documentId Identifiant du document (required)
     * @param  \MailevaApiAdapter\App\Client\LrelClient\Model\Priority $priority (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdDocumentsDocumentIdSetPriorityPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendingsSendingIdDocumentsDocumentIdSetPriorityPostRequest($sendingId, $documentId, $priority = null, string $contentType = self::contentTypes['sendingsSendingIdDocumentsDocumentIdSetPriorityPost'][0])
    {

        // verify the required parameter 'sendingId' is set
        if ($sendingId === null || (is_array($sendingId) && count($sendingId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sendingId when calling sendingsSendingIdDocumentsDocumentIdSetPriorityPost'
            );
        }
        if (strlen($sendingId) > 40) {
            throw new \InvalidArgumentException('invalid length for "$sendingId" when calling DocumentsApi.sendingsSendingIdDocumentsDocumentIdSetPriorityPost, must be smaller than or equal to 40.');
        }
        
        // verify the required parameter 'documentId' is set
        if ($documentId === null || (is_array($documentId) && count($documentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $documentId when calling sendingsSendingIdDocumentsDocumentIdSetPriorityPost'
            );
        }
        if (strlen($documentId) > 40) {
            throw new \InvalidArgumentException('invalid length for "$documentId" when calling DocumentsApi.sendingsSendingIdDocumentsDocumentIdSetPriorityPost, must be smaller than or equal to 40.');
        }
        


        $resourcePath = '/sendings/{sending_id}/documents/{document_id}/set_priority';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sendingId !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sendingId),
                $resourcePath
            );
        }
        // path params
        if ($documentId !== null) {
            $resourcePath = str_replace(
                '{' . 'document_id' . '}',
                ObjectSerializer::toPathValue($documentId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($priority)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($priority));
            } else {
                $httpBody = $priority;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendingsSendingIdDocumentsGet
     *
     * Liste des documents d&#39;un envoi
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  float $startIndex Le premier élément à retourner (optional, default to 1)
     * @param  float $count Le nombre d&#39;élément à retourner (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdDocumentsGet'] to see the possible values for this operation
     *
     * @throws \MailevaApiAdapter\App\Client\LrelClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailevaApiAdapter\App\Client\LrelClient\Model\DocumentsResponse|\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorsResponse|\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse|\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse
     */
    public function sendingsSendingIdDocumentsGet($sendingId, $startIndex = 1, $count = 30, string $contentType = self::contentTypes['sendingsSendingIdDocumentsGet'][0])
    {
        list($response) = $this->sendingsSendingIdDocumentsGetWithHttpInfo($sendingId, $startIndex, $count, $contentType);
        return $response;
    }

    /**
     * Operation sendingsSendingIdDocumentsGetWithHttpInfo
     *
     * Liste des documents d&#39;un envoi
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  float $startIndex Le premier élément à retourner (optional, default to 1)
     * @param  float $count Le nombre d&#39;élément à retourner (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdDocumentsGet'] to see the possible values for this operation
     *
     * @throws \MailevaApiAdapter\App\Client\LrelClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailevaApiAdapter\App\Client\LrelClient\Model\DocumentsResponse|\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorsResponse|\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse|\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendingsSendingIdDocumentsGetWithHttpInfo($sendingId, $startIndex = 1, $count = 30, string $contentType = self::contentTypes['sendingsSendingIdDocumentsGet'][0])
    {
        $request = $this->sendingsSendingIdDocumentsGetRequest($sendingId, $startIndex, $count, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MailevaApiAdapter\App\Client\LrelClient\Model\DocumentsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\LrelClient\Model\DocumentsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\LrelClient\Model\DocumentsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MailevaApiAdapter\App\Client\LrelClient\Model\DocumentsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\LrelClient\Model\DocumentsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendingsSendingIdDocumentsGetAsync
     *
     * Liste des documents d&#39;un envoi
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  float $startIndex Le premier élément à retourner (optional, default to 1)
     * @param  float $count Le nombre d&#39;élément à retourner (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdDocumentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdDocumentsGetAsync($sendingId, $startIndex = 1, $count = 30, string $contentType = self::contentTypes['sendingsSendingIdDocumentsGet'][0])
    {
        return $this->sendingsSendingIdDocumentsGetAsyncWithHttpInfo($sendingId, $startIndex, $count, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendingsSendingIdDocumentsGetAsyncWithHttpInfo
     *
     * Liste des documents d&#39;un envoi
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  float $startIndex Le premier élément à retourner (optional, default to 1)
     * @param  float $count Le nombre d&#39;élément à retourner (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdDocumentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdDocumentsGetAsyncWithHttpInfo($sendingId, $startIndex = 1, $count = 30, string $contentType = self::contentTypes['sendingsSendingIdDocumentsGet'][0])
    {
        $returnType = '\MailevaApiAdapter\App\Client\LrelClient\Model\DocumentsResponse';
        $request = $this->sendingsSendingIdDocumentsGetRequest($sendingId, $startIndex, $count, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendingsSendingIdDocumentsGet'
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  float $startIndex Le premier élément à retourner (optional, default to 1)
     * @param  float $count Le nombre d&#39;élément à retourner (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdDocumentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendingsSendingIdDocumentsGetRequest($sendingId, $startIndex = 1, $count = 30, string $contentType = self::contentTypes['sendingsSendingIdDocumentsGet'][0])
    {

        // verify the required parameter 'sendingId' is set
        if ($sendingId === null || (is_array($sendingId) && count($sendingId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sendingId when calling sendingsSendingIdDocumentsGet'
            );
        }
        if (strlen($sendingId) > 40) {
            throw new \InvalidArgumentException('invalid length for "$sendingId" when calling DocumentsApi.sendingsSendingIdDocumentsGet, must be smaller than or equal to 40.');
        }
        
        
        

        $resourcePath = '/sendings/{sending_id}/documents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startIndex,
            'start_index', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($sendingId !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sendingId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendingsSendingIdDocumentsPost
     *
     * Ajout d&#39;un document à l&#39;envoi.
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  \SplFileObject $document document (optional)
     * @param  \MailevaApiAdapter\App\Client\LrelClient\Model\SendingsSendingIdDocumentsGetRequestMetadata $metadata metadata (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdDocumentsPost'] to see the possible values for this operation
     *
     * @throws \MailevaApiAdapter\App\Client\LrelClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailevaApiAdapter\App\Client\LrelClient\Model\DocumentResponse|\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorsResponse|\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse|\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse
     */
    public function sendingsSendingIdDocumentsPost($sendingId, $document = null, $metadata = null, string $contentType = self::contentTypes['sendingsSendingIdDocumentsPost'][0])
    {
        list($response) = $this->sendingsSendingIdDocumentsPostWithHttpInfo($sendingId, $document, $metadata, $contentType);
        return $response;
    }

    /**
     * Operation sendingsSendingIdDocumentsPostWithHttpInfo
     *
     * Ajout d&#39;un document à l&#39;envoi.
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  \SplFileObject $document (optional)
     * @param  \MailevaApiAdapter\App\Client\LrelClient\Model\SendingsSendingIdDocumentsGetRequestMetadata $metadata (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdDocumentsPost'] to see the possible values for this operation
     *
     * @throws \MailevaApiAdapter\App\Client\LrelClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailevaApiAdapter\App\Client\LrelClient\Model\DocumentResponse|\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorsResponse|\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse|\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendingsSendingIdDocumentsPostWithHttpInfo($sendingId, $document = null, $metadata = null, string $contentType = self::contentTypes['sendingsSendingIdDocumentsPost'][0])
    {
        $request = $this->sendingsSendingIdDocumentsPostRequest($sendingId, $document, $metadata, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\MailevaApiAdapter\App\Client\LrelClient\Model\DocumentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\LrelClient\Model\DocumentResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\LrelClient\Model\DocumentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MailevaApiAdapter\App\Client\LrelClient\Model\DocumentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\LrelClient\Model\DocumentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailevaApiAdapter\App\Client\LrelClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendingsSendingIdDocumentsPostAsync
     *
     * Ajout d&#39;un document à l&#39;envoi.
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  \SplFileObject $document (optional)
     * @param  \MailevaApiAdapter\App\Client\LrelClient\Model\SendingsSendingIdDocumentsGetRequestMetadata $metadata (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdDocumentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdDocumentsPostAsync($sendingId, $document = null, $metadata = null, string $contentType = self::contentTypes['sendingsSendingIdDocumentsPost'][0])
    {
        return $this->sendingsSendingIdDocumentsPostAsyncWithHttpInfo($sendingId, $document, $metadata, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendingsSendingIdDocumentsPostAsyncWithHttpInfo
     *
     * Ajout d&#39;un document à l&#39;envoi.
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  \SplFileObject $document (optional)
     * @param  \MailevaApiAdapter\App\Client\LrelClient\Model\SendingsSendingIdDocumentsGetRequestMetadata $metadata (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdDocumentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendingsSendingIdDocumentsPostAsyncWithHttpInfo($sendingId, $document = null, $metadata = null, string $contentType = self::contentTypes['sendingsSendingIdDocumentsPost'][0])
    {
        $returnType = '\MailevaApiAdapter\App\Client\LrelClient\Model\DocumentResponse';
        $request = $this->sendingsSendingIdDocumentsPostRequest($sendingId, $document, $metadata, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendingsSendingIdDocumentsPost'
     *
     * @param  string $sendingId Identifiant d&#39;un envoi (required)
     * @param  \SplFileObject $document (optional)
     * @param  \MailevaApiAdapter\App\Client\LrelClient\Model\SendingsSendingIdDocumentsGetRequestMetadata $metadata (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendingsSendingIdDocumentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendingsSendingIdDocumentsPostRequest($sendingId, $document = null, $metadata = null, string $contentType = self::contentTypes['sendingsSendingIdDocumentsPost'][0])
    {

        // verify the required parameter 'sendingId' is set
        if ($sendingId === null || (is_array($sendingId) && count($sendingId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sendingId when calling sendingsSendingIdDocumentsPost'
            );
        }
        if (strlen($sendingId) > 40) {
            throw new \InvalidArgumentException('invalid length for "$sendingId" when calling DocumentsApi.sendingsSendingIdDocumentsPost, must be smaller than or equal to 40.');
        }
        



        $resourcePath = '/sendings/{sending_id}/documents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sendingId !== null) {
            $resourcePath = str_replace(
                '{' . 'sending_id' . '}',
                ObjectSerializer::toPathValue($sendingId),
                $resourcePath
            );
        }

        // form params
        if ($document !== null) {
            $multipart = true;
            $formParams['document'] = [];
            $paramFiles = is_array($document) ? $document : [$document];
            foreach ($paramFiles as $paramFile) {
                $formParams['document'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($metadata !== null) {
            $formParams['metadata'] = ObjectSerializer::toFormValue($metadata);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
