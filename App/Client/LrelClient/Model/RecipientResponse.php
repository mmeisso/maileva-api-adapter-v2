<?php
/**
 * RecipientResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MailevaApiAdapter\App\Client\LrelClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Maileva / Envoi et Suivi de Lettres Recommandées En Ligne distribuées par le facteur
 *
 * API pour envoyer et suivre des Lettres Recommandées En Ligne distribuées par le facteur  Elle comprend les fonctions clés pour :   - créer un envoi,  - ajouter des documents et des destinataires,  - choisir ses options,  - suivre la production.  Pour connaitre les notifications (webhooks) concernées par cette API, consultez la documentation de l'API \"notification_center\".
 *
 * The version of the OpenAPI document: 2.5
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailevaApiAdapter\App\Client\LrelClient\Model;

use \ArrayAccess;
use \MailevaApiAdapter\App\Client\LrelClient\ObjectSerializer;

/**
 * RecipientResponse Class Doc Comment
 *
 * @category Class
 * @description Les destinataires importés pour l&#39;envoi
 * @package  MailevaApiAdapter\App\Client\LrelClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RecipientResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'recipient_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'customId' => 'string',
        'customData' => 'string',
        'addressLine1' => 'string',
        'addressLine2' => 'string',
        'addressLine3' => 'string',
        'addressLine4' => 'string',
        'addressLine5' => 'string',
        'addressLine6' => 'string',
        'countryCode' => '\MailevaApiAdapter\App\Client\LrelClient\Model\CountryCode',
        'documentsOverride' => '\MailevaApiAdapter\App\Client\LrelClient\Model\DocumentsOverrideItem[]',
        'status' => '\MailevaApiAdapter\App\Client\LrelClient\Model\RecipientStatus',
        'statusDetail' => 'string',
        'lastDeliveryStatus' => 'string',
        'lastDeliveryStatusDate' => 'string',
        'postagePrice' => 'float',
        'registeredNumber' => 'string',
        'archiveDate' => '\DateTime',
        'archiveUrl' => 'string',
        'acknowledgementOfReceiptArchiveDate' => '\DateTime',
        'acknowledgementOfReceiptUrl' => 'string',
        'pagesCount' => 'int',
        'billedPagesCount' => 'int',
        'sheetsCount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'customId' => null,
        'customData' => null,
        'addressLine1' => null,
        'addressLine2' => null,
        'addressLine3' => null,
        'addressLine4' => null,
        'addressLine5' => null,
        'addressLine6' => null,
        'countryCode' => null,
        'documentsOverride' => null,
        'status' => null,
        'statusDetail' => null,
        'lastDeliveryStatus' => null,
        'lastDeliveryStatusDate' => 'datetime',
        'postagePrice' => 'float',
        'registeredNumber' => null,
        'archiveDate' => 'date-time',
        'archiveUrl' => null,
        'acknowledgementOfReceiptArchiveDate' => 'date-time',
        'acknowledgementOfReceiptUrl' => null,
        'pagesCount' => null,
        'billedPagesCount' => null,
        'sheetsCount' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'customId' => false,
		'customData' => false,
		'addressLine1' => false,
		'addressLine2' => false,
		'addressLine3' => false,
		'addressLine4' => false,
		'addressLine5' => false,
		'addressLine6' => false,
		'countryCode' => false,
		'documentsOverride' => false,
		'status' => false,
		'statusDetail' => false,
		'lastDeliveryStatus' => false,
		'lastDeliveryStatusDate' => false,
		'postagePrice' => false,
		'registeredNumber' => false,
		'archiveDate' => false,
		'archiveUrl' => false,
		'acknowledgementOfReceiptArchiveDate' => false,
		'acknowledgementOfReceiptUrl' => false,
		'pagesCount' => false,
		'billedPagesCount' => false,
		'sheetsCount' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'customId' => 'custom_id',
        'customData' => 'custom_data',
        'addressLine1' => 'address_line_1',
        'addressLine2' => 'address_line_2',
        'addressLine3' => 'address_line_3',
        'addressLine4' => 'address_line_4',
        'addressLine5' => 'address_line_5',
        'addressLine6' => 'address_line_6',
        'countryCode' => 'country_code',
        'documentsOverride' => 'documents_override',
        'status' => 'status',
        'statusDetail' => 'status_detail',
        'lastDeliveryStatus' => 'last_delivery_status',
        'lastDeliveryStatusDate' => 'last_delivery_status_date',
        'postagePrice' => 'postage_price',
        'registeredNumber' => 'registered_number',
        'archiveDate' => 'archive_date',
        'archiveUrl' => 'archive_url',
        'acknowledgementOfReceiptArchiveDate' => 'acknowledgement_of_receipt_archive_date',
        'acknowledgementOfReceiptUrl' => 'acknowledgement_of_receipt_url',
        'pagesCount' => 'pages_count',
        'billedPagesCount' => 'billed_pages_count',
        'sheetsCount' => 'sheets_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'customId' => 'setCustomId',
        'customData' => 'setCustomData',
        'addressLine1' => 'setAddressLine1',
        'addressLine2' => 'setAddressLine2',
        'addressLine3' => 'setAddressLine3',
        'addressLine4' => 'setAddressLine4',
        'addressLine5' => 'setAddressLine5',
        'addressLine6' => 'setAddressLine6',
        'countryCode' => 'setCountryCode',
        'documentsOverride' => 'setDocumentsOverride',
        'status' => 'setStatus',
        'statusDetail' => 'setStatusDetail',
        'lastDeliveryStatus' => 'setLastDeliveryStatus',
        'lastDeliveryStatusDate' => 'setLastDeliveryStatusDate',
        'postagePrice' => 'setPostagePrice',
        'registeredNumber' => 'setRegisteredNumber',
        'archiveDate' => 'setArchiveDate',
        'archiveUrl' => 'setArchiveUrl',
        'acknowledgementOfReceiptArchiveDate' => 'setAcknowledgementOfReceiptArchiveDate',
        'acknowledgementOfReceiptUrl' => 'setAcknowledgementOfReceiptUrl',
        'pagesCount' => 'setPagesCount',
        'billedPagesCount' => 'setBilledPagesCount',
        'sheetsCount' => 'setSheetsCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'customId' => 'getCustomId',
        'customData' => 'getCustomData',
        'addressLine1' => 'getAddressLine1',
        'addressLine2' => 'getAddressLine2',
        'addressLine3' => 'getAddressLine3',
        'addressLine4' => 'getAddressLine4',
        'addressLine5' => 'getAddressLine5',
        'addressLine6' => 'getAddressLine6',
        'countryCode' => 'getCountryCode',
        'documentsOverride' => 'getDocumentsOverride',
        'status' => 'getStatus',
        'statusDetail' => 'getStatusDetail',
        'lastDeliveryStatus' => 'getLastDeliveryStatus',
        'lastDeliveryStatusDate' => 'getLastDeliveryStatusDate',
        'postagePrice' => 'getPostagePrice',
        'registeredNumber' => 'getRegisteredNumber',
        'archiveDate' => 'getArchiveDate',
        'archiveUrl' => 'getArchiveUrl',
        'acknowledgementOfReceiptArchiveDate' => 'getAcknowledgementOfReceiptArchiveDate',
        'acknowledgementOfReceiptUrl' => 'getAcknowledgementOfReceiptUrl',
        'pagesCount' => 'getPagesCount',
        'billedPagesCount' => 'getBilledPagesCount',
        'sheetsCount' => 'getSheetsCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('customId', $data ?? [], null);
        $this->setIfExists('customData', $data ?? [], null);
        $this->setIfExists('addressLine1', $data ?? [], null);
        $this->setIfExists('addressLine2', $data ?? [], null);
        $this->setIfExists('addressLine3', $data ?? [], null);
        $this->setIfExists('addressLine4', $data ?? [], null);
        $this->setIfExists('addressLine5', $data ?? [], null);
        $this->setIfExists('addressLine6', $data ?? [], null);
        $this->setIfExists('countryCode', $data ?? [], null);
        $this->setIfExists('documentsOverride', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('statusDetail', $data ?? [], null);
        $this->setIfExists('lastDeliveryStatus', $data ?? [], null);
        $this->setIfExists('lastDeliveryStatusDate', $data ?? [], null);
        $this->setIfExists('postagePrice', $data ?? [], null);
        $this->setIfExists('registeredNumber', $data ?? [], null);
        $this->setIfExists('archiveDate', $data ?? [], null);
        $this->setIfExists('archiveUrl', $data ?? [], null);
        $this->setIfExists('acknowledgementOfReceiptArchiveDate', $data ?? [], null);
        $this->setIfExists('acknowledgementOfReceiptUrl', $data ?? [], null);
        $this->setIfExists('pagesCount', $data ?? [], null);
        $this->setIfExists('billedPagesCount', $data ?? [], null);
        $this->setIfExists('sheetsCount', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (!is_null($this->container['customId']) && (mb_strlen($this->container['customId']) > 32)) {
            $invalidProperties[] = "invalid value for 'customId', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['customData']) && (mb_strlen($this->container['customData']) > 255)) {
            $invalidProperties[] = "invalid value for 'customData', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['addressLine6'] === null) {
            $invalidProperties[] = "'addressLine6' can't be null";
        }
        if ($this->container['countryCode'] === null) {
            $invalidProperties[] = "'countryCode' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Identifiant du destinataire
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets customId
     *
     * @return string|null
     */
    public function getCustomId()
    {
        return $this->container['customId'];
    }

    /**
     * Sets customId
     *
     * @param string|null $customId Identifiant du destinataire fourni par le client
     *
     * @return self
     */
    public function setCustomId($customId)
    {
        if (is_null($customId)) {
            throw new \InvalidArgumentException('non-nullable customId cannot be null');
        }
        if ((mb_strlen($customId) > 32)) {
            throw new \InvalidArgumentException('invalid length for $customId when calling RecipientResponse., must be smaller than or equal to 32.');
        }

        $this->container['customId'] = $customId;

        return $this;
    }

    /**
     * Gets customData
     *
     * @return string|null
     */
    public function getCustomData()
    {
        return $this->container['customData'];
    }

    /**
     * Sets customData
     *
     * @param string|null $customData Information libre fournie par le client
     *
     * @return self
     */
    public function setCustomData($customData)
    {
        if (is_null($customData)) {
            throw new \InvalidArgumentException('non-nullable customData cannot be null');
        }
        if ((mb_strlen($customData) > 255)) {
            throw new \InvalidArgumentException('invalid length for $customData when calling RecipientResponse., must be smaller than or equal to 255.');
        }

        $this->container['customData'] = $customData;

        return $this;
    }

    /**
     * Gets addressLine1
     *
     * @return string|null
     */
    public function getAddressLine1()
    {
        return $this->container['addressLine1'];
    }

    /**
     * Sets addressLine1
     *
     * @param string|null $addressLine1 Ligne d'adresse n°1 (Société)
     *
     * @return self
     */
    public function setAddressLine1($addressLine1)
    {
        if (is_null($addressLine1)) {
            throw new \InvalidArgumentException('non-nullable addressLine1 cannot be null');
        }
        $this->container['addressLine1'] = $addressLine1;

        return $this;
    }

    /**
     * Gets addressLine2
     *
     * @return string|null
     */
    public function getAddressLine2()
    {
        return $this->container['addressLine2'];
    }

    /**
     * Sets addressLine2
     *
     * @param string|null $addressLine2 Ligne d'adresse n°2 (Civilité, Prénom, Nom)
     *
     * @return self
     */
    public function setAddressLine2($addressLine2)
    {
        if (is_null($addressLine2)) {
            throw new \InvalidArgumentException('non-nullable addressLine2 cannot be null');
        }
        $this->container['addressLine2'] = $addressLine2;

        return $this;
    }

    /**
     * Gets addressLine3
     *
     * @return string|null
     */
    public function getAddressLine3()
    {
        return $this->container['addressLine3'];
    }

    /**
     * Sets addressLine3
     *
     * @param string|null $addressLine3 Ligne d'adresse n°3 (Résidence, Bâtiement ...)
     *
     * @return self
     */
    public function setAddressLine3($addressLine3)
    {
        if (is_null($addressLine3)) {
            throw new \InvalidArgumentException('non-nullable addressLine3 cannot be null');
        }
        $this->container['addressLine3'] = $addressLine3;

        return $this;
    }

    /**
     * Gets addressLine4
     *
     * @return string|null
     */
    public function getAddressLine4()
    {
        return $this->container['addressLine4'];
    }

    /**
     * Sets addressLine4
     *
     * @param string|null $addressLine4 Ligne d'adresse n°4 (N° et libellé de la voie)
     *
     * @return self
     */
    public function setAddressLine4($addressLine4)
    {
        if (is_null($addressLine4)) {
            throw new \InvalidArgumentException('non-nullable addressLine4 cannot be null');
        }
        $this->container['addressLine4'] = $addressLine4;

        return $this;
    }

    /**
     * Gets addressLine5
     *
     * @return string|null
     */
    public function getAddressLine5()
    {
        return $this->container['addressLine5'];
    }

    /**
     * Sets addressLine5
     *
     * @param string|null $addressLine5 Ligne d'adresse n°5 (Lieu dit, BP...)
     *
     * @return self
     */
    public function setAddressLine5($addressLine5)
    {
        if (is_null($addressLine5)) {
            throw new \InvalidArgumentException('non-nullable addressLine5 cannot be null');
        }
        $this->container['addressLine5'] = $addressLine5;

        return $this;
    }

    /**
     * Gets addressLine6
     *
     * @return string
     */
    public function getAddressLine6()
    {
        return $this->container['addressLine6'];
    }

    /**
     * Sets addressLine6
     *
     * @param string $addressLine6 Ligne d'adresse n°6 (Code postal et ville)
     *
     * @return self
     */
    public function setAddressLine6($addressLine6)
    {
        if (is_null($addressLine6)) {
            throw new \InvalidArgumentException('non-nullable addressLine6 cannot be null');
        }
        $this->container['addressLine6'] = $addressLine6;

        return $this;
    }

    /**
     * Gets countryCode
     *
     * @return \MailevaApiAdapter\App\Client\LrelClient\Model\CountryCode
     */
    public function getCountryCode()
    {
        return $this->container['countryCode'];
    }

    /**
     * Sets countryCode
     *
     * @param \MailevaApiAdapter\App\Client\LrelClient\Model\CountryCode $countryCode countryCode
     *
     * @return self
     */
    public function setCountryCode($countryCode)
    {
        if (is_null($countryCode)) {
            throw new \InvalidArgumentException('non-nullable countryCode cannot be null');
        }
        $this->container['countryCode'] = $countryCode;

        return $this;
    }

    /**
     * Gets documentsOverride
     *
     * @return \MailevaApiAdapter\App\Client\LrelClient\Model\DocumentsOverrideItem[]|null
     */
    public function getDocumentsOverride()
    {
        return $this->container['documentsOverride'];
    }

    /**
     * Sets documentsOverride
     *
     * @param \MailevaApiAdapter\App\Client\LrelClient\Model\DocumentsOverrideItem[]|null $documentsOverride Liste de bribes de documents. Si ce champ n'est pas renseigné,  le destinataire recevra tous les documents associé à l'envoi.  Si ce champ est renseigné, le destinataire recevra la liste de  bribes de documents indiquées (dans l'ordre des éléments du tableau).
     *
     * @return self
     */
    public function setDocumentsOverride($documentsOverride)
    {
        if (is_null($documentsOverride)) {
            throw new \InvalidArgumentException('non-nullable documentsOverride cannot be null');
        }
        $this->container['documentsOverride'] = $documentsOverride;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \MailevaApiAdapter\App\Client\LrelClient\Model\RecipientStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \MailevaApiAdapter\App\Client\LrelClient\Model\RecipientStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets statusDetail
     *
     * @return string|null
     */
    public function getStatusDetail()
    {
        return $this->container['statusDetail'];
    }

    /**
     * Sets statusDetail
     *
     * @param string|null $statusDetail Détail d'un statut (cause du rejet)
     *
     * @return self
     */
    public function setStatusDetail($statusDetail)
    {
        if (is_null($statusDetail)) {
            throw new \InvalidArgumentException('non-nullable statusDetail cannot be null');
        }
        $this->container['statusDetail'] = $statusDetail;

        return $this;
    }

    /**
     * Gets lastDeliveryStatus
     *
     * @return string|null
     */
    public function getLastDeliveryStatus()
    {
        return $this->container['lastDeliveryStatus'];
    }

    /**
     * Sets lastDeliveryStatus
     *
     * @param string|null $lastDeliveryStatus Dernier statut de distribution
     *
     * @return self
     */
    public function setLastDeliveryStatus($lastDeliveryStatus)
    {
        if (is_null($lastDeliveryStatus)) {
            throw new \InvalidArgumentException('non-nullable lastDeliveryStatus cannot be null');
        }
        $this->container['lastDeliveryStatus'] = $lastDeliveryStatus;

        return $this;
    }

    /**
     * Gets lastDeliveryStatusDate
     *
     * @return string|null
     */
    public function getLastDeliveryStatusDate()
    {
        return $this->container['lastDeliveryStatusDate'];
    }

    /**
     * Sets lastDeliveryStatusDate
     *
     * @param string|null $lastDeliveryStatusDate Date du dernier statut de distribution
     *
     * @return self
     */
    public function setLastDeliveryStatusDate($lastDeliveryStatusDate)
    {
        if (is_null($lastDeliveryStatusDate)) {
            throw new \InvalidArgumentException('non-nullable lastDeliveryStatusDate cannot be null');
        }
        $this->container['lastDeliveryStatusDate'] = $lastDeliveryStatusDate;

        return $this;
    }

    /**
     * Gets postagePrice
     *
     * @return float|null
     */
    public function getPostagePrice()
    {
        return $this->container['postagePrice'];
    }

    /**
     * Sets postagePrice
     *
     * @param float|null $postagePrice Coût de l'affranchissement en euros
     *
     * @return self
     */
    public function setPostagePrice($postagePrice)
    {
        if (is_null($postagePrice)) {
            throw new \InvalidArgumentException('non-nullable postagePrice cannot be null');
        }
        $this->container['postagePrice'] = $postagePrice;

        return $this;
    }

    /**
     * Gets registeredNumber
     *
     * @return string|null
     */
    public function getRegisteredNumber()
    {
        return $this->container['registeredNumber'];
    }

    /**
     * Sets registeredNumber
     *
     * @param string|null $registeredNumber Numéro de recommandé
     *
     * @return self
     */
    public function setRegisteredNumber($registeredNumber)
    {
        if (is_null($registeredNumber)) {
            throw new \InvalidArgumentException('non-nullable registeredNumber cannot be null');
        }
        $this->container['registeredNumber'] = $registeredNumber;

        return $this;
    }

    /**
     * Gets archiveDate
     *
     * @return \DateTime|null
     */
    public function getArchiveDate()
    {
        return $this->container['archiveDate'];
    }

    /**
     * Sets archiveDate
     *
     * @param \DateTime|null $archiveDate Date d'archivage du pli
     *
     * @return self
     */
    public function setArchiveDate($archiveDate)
    {
        if (is_null($archiveDate)) {
            throw new \InvalidArgumentException('non-nullable archiveDate cannot be null');
        }
        $this->container['archiveDate'] = $archiveDate;

        return $this;
    }

    /**
     * Gets archiveUrl
     *
     * @return string|null
     */
    public function getArchiveUrl()
    {
        return $this->container['archiveUrl'];
    }

    /**
     * Sets archiveUrl
     *
     * @param string|null $archiveUrl URL de l'archive du pli
     *
     * @return self
     */
    public function setArchiveUrl($archiveUrl)
    {
        if (is_null($archiveUrl)) {
            throw new \InvalidArgumentException('non-nullable archiveUrl cannot be null');
        }
        $this->container['archiveUrl'] = $archiveUrl;

        return $this;
    }

    /**
     * Gets acknowledgementOfReceiptArchiveDate
     *
     * @return \DateTime|null
     */
    public function getAcknowledgementOfReceiptArchiveDate()
    {
        return $this->container['acknowledgementOfReceiptArchiveDate'];
    }

    /**
     * Sets acknowledgementOfReceiptArchiveDate
     *
     * @param \DateTime|null $acknowledgementOfReceiptArchiveDate Date d'archivage de l'avis de réception (AR)
     *
     * @return self
     */
    public function setAcknowledgementOfReceiptArchiveDate($acknowledgementOfReceiptArchiveDate)
    {
        if (is_null($acknowledgementOfReceiptArchiveDate)) {
            throw new \InvalidArgumentException('non-nullable acknowledgementOfReceiptArchiveDate cannot be null');
        }
        $this->container['acknowledgementOfReceiptArchiveDate'] = $acknowledgementOfReceiptArchiveDate;

        return $this;
    }

    /**
     * Gets acknowledgementOfReceiptUrl
     *
     * @return string|null
     */
    public function getAcknowledgementOfReceiptUrl()
    {
        return $this->container['acknowledgementOfReceiptUrl'];
    }

    /**
     * Sets acknowledgementOfReceiptUrl
     *
     * @param string|null $acknowledgementOfReceiptUrl URL de l'archive de l'avis de réception
     *
     * @return self
     */
    public function setAcknowledgementOfReceiptUrl($acknowledgementOfReceiptUrl)
    {
        if (is_null($acknowledgementOfReceiptUrl)) {
            throw new \InvalidArgumentException('non-nullable acknowledgementOfReceiptUrl cannot be null');
        }
        $this->container['acknowledgementOfReceiptUrl'] = $acknowledgementOfReceiptUrl;

        return $this;
    }

    /**
     * Gets pagesCount
     *
     * @return int|null
     */
    public function getPagesCount()
    {
        return $this->container['pagesCount'];
    }

    /**
     * Sets pagesCount
     *
     * @param int|null $pagesCount Nombre de pages. Ce nombre de pages inclut l'éventuelle page porte-adresse (payante ou obligatoire) mais n'inclut pas les pages blanches ajoutées au verso par Maileva.
     *
     * @return self
     */
    public function setPagesCount($pagesCount)
    {
        if (is_null($pagesCount)) {
            throw new \InvalidArgumentException('non-nullable pagesCount cannot be null');
        }
        $this->container['pagesCount'] = $pagesCount;

        return $this;
    }

    /**
     * Gets billedPagesCount
     *
     * @return int|null
     */
    public function getBilledPagesCount()
    {
        return $this->container['billedPagesCount'];
    }

    /**
     * Sets billedPagesCount
     *
     * @param int|null $billedPagesCount Nombre de pages facturées (disponible à partir du statut ACCEPTED). Ce nombre de pages inclut la page porte-adresse payante (DL) mais n'inclut pas la page porte-adresse obligatoire (C4) ni les pages blanches ajoutées au verso par Maileva.
     *
     * @return self
     */
    public function setBilledPagesCount($billedPagesCount)
    {
        if (is_null($billedPagesCount)) {
            throw new \InvalidArgumentException('non-nullable billedPagesCount cannot be null');
        }
        $this->container['billedPagesCount'] = $billedPagesCount;

        return $this;
    }

    /**
     * Gets sheetsCount
     *
     * @return int|null
     */
    public function getSheetsCount()
    {
        return $this->container['sheetsCount'];
    }

    /**
     * Sets sheetsCount
     *
     * @param int|null $sheetsCount Nombre de feuilles (disponible à partir du statut ACCEPTED). Ce nombre de feuilles inclut la page porte-adresse éventuelle (payante ou obligatoire).
     *
     * @return self
     */
    public function setSheetsCount($sheetsCount)
    {
        if (is_null($sheetsCount)) {
            throw new \InvalidArgumentException('non-nullable sheetsCount cannot be null');
        }
        $this->container['sheetsCount'] = $sheetsCount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


