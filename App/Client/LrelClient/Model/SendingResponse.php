<?php
/**
 * SendingResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MailevaApiAdapter\App\Client\LrelClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Maileva / Envoi et Suivi de Lettres Recommandées En Ligne distribuées par le facteur
 *
 * API pour envoyer et suivre des Lettres Recommandées En Ligne distribuées par le facteur  Elle comprend les fonctions clés pour :   - créer un envoi,  - ajouter des documents et des destinataires,  - choisir ses options,  - suivre la production.  Pour connaitre les notifications (webhooks) concernées par cette API, consultez la documentation de l'API \"notification_center\".
 *
 * The version of the OpenAPI document: 2.5
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailevaApiAdapter\App\Client\LrelClient\Model;

use \ArrayAccess;
use \MailevaApiAdapter\App\Client\LrelClient\ObjectSerializer;

/**
 * SendingResponse Class Doc Comment
 *
 * @category Class
 * @description Un envoi de LREL
 * @package  MailevaApiAdapter\App\Client\LrelClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SendingResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'sending_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'customId' => 'string',
        'customData' => 'string',
        'status' => '\MailevaApiAdapter\App\Client\LrelClient\Model\SendingStatus',
        'statusDetail' => 'string',
        'acknowledgementOfReceipt' => 'bool',
        'acknowledgementOfReceiptScanning' => 'bool',
        'creationDate' => '\DateTime',
        'submissionDate' => '\DateTime',
        'scheduledDate' => '\DateTime',
        'processedDate' => '\DateTime',
        'archiveDate' => '\DateTime',
        'documentsCount' => 'int',
        'documentsWeight' => 'int',
        'pagesCount' => 'int',
        'billedPagesCount' => 'int',
        'sheetsCount' => 'int',
        'recipientsCounts' => '\MailevaApiAdapter\App\Client\LrelClient\Model\RecipientsCounts',
        'colorPrinting' => 'bool',
        'duplexPrinting' => 'bool',
        'optionalAddressSheet' => 'bool',
        'systemAddressSheet' => 'bool',
        'notificationEmail' => 'string',
        'envelopeType' => '\MailevaApiAdapter\App\Client\LrelClient\Model\EnvelopeType',
        'senderAddressLine1' => 'string',
        'senderAddressLine2' => 'string',
        'senderAddressLine3' => 'string',
        'senderAddressLine4' => 'string',
        'senderAddressLine5' => 'string',
        'senderAddressLine6' => 'string',
        'senderCountryCode' => '\MailevaApiAdapter\App\Client\LrelClient\Model\CountryCode',
        'archivingDuration' => 'int',
        'returnEnvelope' => '\MailevaApiAdapter\App\Client\LrelClient\Model\ReturnEnvelopeOutput',
        'depositProofDate' => 'string',
        'depositProofUrl' => 'string',
        'depositProofArchiveDate' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'customId' => null,
        'customData' => null,
        'status' => null,
        'statusDetail' => null,
        'acknowledgementOfReceipt' => null,
        'acknowledgementOfReceiptScanning' => null,
        'creationDate' => 'date-time',
        'submissionDate' => 'date-time',
        'scheduledDate' => 'date-time',
        'processedDate' => 'date-time',
        'archiveDate' => 'date-time',
        'documentsCount' => null,
        'documentsWeight' => null,
        'pagesCount' => null,
        'billedPagesCount' => null,
        'sheetsCount' => null,
        'recipientsCounts' => null,
        'colorPrinting' => null,
        'duplexPrinting' => null,
        'optionalAddressSheet' => null,
        'systemAddressSheet' => null,
        'notificationEmail' => null,
        'envelopeType' => null,
        'senderAddressLine1' => null,
        'senderAddressLine2' => null,
        'senderAddressLine3' => null,
        'senderAddressLine4' => null,
        'senderAddressLine5' => null,
        'senderAddressLine6' => null,
        'senderCountryCode' => null,
        'archivingDuration' => null,
        'returnEnvelope' => null,
        'depositProofDate' => 'datetime',
        'depositProofUrl' => null,
        'depositProofArchiveDate' => 'datetime'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'name' => false,
		'customId' => false,
		'customData' => false,
		'status' => false,
		'statusDetail' => false,
		'acknowledgementOfReceipt' => false,
		'acknowledgementOfReceiptScanning' => false,
		'creationDate' => false,
		'submissionDate' => false,
		'scheduledDate' => false,
		'processedDate' => false,
		'archiveDate' => false,
		'documentsCount' => false,
		'documentsWeight' => false,
		'pagesCount' => false,
		'billedPagesCount' => false,
		'sheetsCount' => false,
		'recipientsCounts' => false,
		'colorPrinting' => false,
		'duplexPrinting' => false,
		'optionalAddressSheet' => false,
		'systemAddressSheet' => false,
		'notificationEmail' => false,
		'envelopeType' => false,
		'senderAddressLine1' => false,
		'senderAddressLine2' => false,
		'senderAddressLine3' => false,
		'senderAddressLine4' => false,
		'senderAddressLine5' => false,
		'senderAddressLine6' => false,
		'senderCountryCode' => false,
		'archivingDuration' => false,
		'returnEnvelope' => false,
		'depositProofDate' => false,
		'depositProofUrl' => false,
		'depositProofArchiveDate' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'customId' => 'custom_id',
        'customData' => 'custom_data',
        'status' => 'status',
        'statusDetail' => 'status_detail',
        'acknowledgementOfReceipt' => 'acknowledgement_of_receipt',
        'acknowledgementOfReceiptScanning' => 'acknowledgement_of_receipt_scanning',
        'creationDate' => 'creation_date',
        'submissionDate' => 'submission_date',
        'scheduledDate' => 'scheduled_date',
        'processedDate' => 'processed_date',
        'archiveDate' => 'archive_date',
        'documentsCount' => 'documents_count',
        'documentsWeight' => 'documents_weight',
        'pagesCount' => 'pages_count',
        'billedPagesCount' => 'billed_pages_count',
        'sheetsCount' => 'sheets_count',
        'recipientsCounts' => 'recipients_counts',
        'colorPrinting' => 'color_printing',
        'duplexPrinting' => 'duplex_printing',
        'optionalAddressSheet' => 'optional_address_sheet',
        'systemAddressSheet' => 'system_address_sheet',
        'notificationEmail' => 'notification_email',
        'envelopeType' => 'envelope_type',
        'senderAddressLine1' => 'sender_address_line_1',
        'senderAddressLine2' => 'sender_address_line_2',
        'senderAddressLine3' => 'sender_address_line_3',
        'senderAddressLine4' => 'sender_address_line_4',
        'senderAddressLine5' => 'sender_address_line_5',
        'senderAddressLine6' => 'sender_address_line_6',
        'senderCountryCode' => 'sender_country_code',
        'archivingDuration' => 'archiving_duration',
        'returnEnvelope' => 'return_envelope',
        'depositProofDate' => 'deposit_proof_date',
        'depositProofUrl' => 'deposit_proof_url',
        'depositProofArchiveDate' => 'deposit_proof_archive_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'customId' => 'setCustomId',
        'customData' => 'setCustomData',
        'status' => 'setStatus',
        'statusDetail' => 'setStatusDetail',
        'acknowledgementOfReceipt' => 'setAcknowledgementOfReceipt',
        'acknowledgementOfReceiptScanning' => 'setAcknowledgementOfReceiptScanning',
        'creationDate' => 'setCreationDate',
        'submissionDate' => 'setSubmissionDate',
        'scheduledDate' => 'setScheduledDate',
        'processedDate' => 'setProcessedDate',
        'archiveDate' => 'setArchiveDate',
        'documentsCount' => 'setDocumentsCount',
        'documentsWeight' => 'setDocumentsWeight',
        'pagesCount' => 'setPagesCount',
        'billedPagesCount' => 'setBilledPagesCount',
        'sheetsCount' => 'setSheetsCount',
        'recipientsCounts' => 'setRecipientsCounts',
        'colorPrinting' => 'setColorPrinting',
        'duplexPrinting' => 'setDuplexPrinting',
        'optionalAddressSheet' => 'setOptionalAddressSheet',
        'systemAddressSheet' => 'setSystemAddressSheet',
        'notificationEmail' => 'setNotificationEmail',
        'envelopeType' => 'setEnvelopeType',
        'senderAddressLine1' => 'setSenderAddressLine1',
        'senderAddressLine2' => 'setSenderAddressLine2',
        'senderAddressLine3' => 'setSenderAddressLine3',
        'senderAddressLine4' => 'setSenderAddressLine4',
        'senderAddressLine5' => 'setSenderAddressLine5',
        'senderAddressLine6' => 'setSenderAddressLine6',
        'senderCountryCode' => 'setSenderCountryCode',
        'archivingDuration' => 'setArchivingDuration',
        'returnEnvelope' => 'setReturnEnvelope',
        'depositProofDate' => 'setDepositProofDate',
        'depositProofUrl' => 'setDepositProofUrl',
        'depositProofArchiveDate' => 'setDepositProofArchiveDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'customId' => 'getCustomId',
        'customData' => 'getCustomData',
        'status' => 'getStatus',
        'statusDetail' => 'getStatusDetail',
        'acknowledgementOfReceipt' => 'getAcknowledgementOfReceipt',
        'acknowledgementOfReceiptScanning' => 'getAcknowledgementOfReceiptScanning',
        'creationDate' => 'getCreationDate',
        'submissionDate' => 'getSubmissionDate',
        'scheduledDate' => 'getScheduledDate',
        'processedDate' => 'getProcessedDate',
        'archiveDate' => 'getArchiveDate',
        'documentsCount' => 'getDocumentsCount',
        'documentsWeight' => 'getDocumentsWeight',
        'pagesCount' => 'getPagesCount',
        'billedPagesCount' => 'getBilledPagesCount',
        'sheetsCount' => 'getSheetsCount',
        'recipientsCounts' => 'getRecipientsCounts',
        'colorPrinting' => 'getColorPrinting',
        'duplexPrinting' => 'getDuplexPrinting',
        'optionalAddressSheet' => 'getOptionalAddressSheet',
        'systemAddressSheet' => 'getSystemAddressSheet',
        'notificationEmail' => 'getNotificationEmail',
        'envelopeType' => 'getEnvelopeType',
        'senderAddressLine1' => 'getSenderAddressLine1',
        'senderAddressLine2' => 'getSenderAddressLine2',
        'senderAddressLine3' => 'getSenderAddressLine3',
        'senderAddressLine4' => 'getSenderAddressLine4',
        'senderAddressLine5' => 'getSenderAddressLine5',
        'senderAddressLine6' => 'getSenderAddressLine6',
        'senderCountryCode' => 'getSenderCountryCode',
        'archivingDuration' => 'getArchivingDuration',
        'returnEnvelope' => 'getReturnEnvelope',
        'depositProofDate' => 'getDepositProofDate',
        'depositProofUrl' => 'getDepositProofUrl',
        'depositProofArchiveDate' => 'getDepositProofArchiveDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ARCHIVING_DURATION_3 = 3;
    public const ARCHIVING_DURATION_6 = 6;
    public const ARCHIVING_DURATION_10 = 10;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getArchivingDurationAllowableValues()
    {
        return [
            self::ARCHIVING_DURATION_3,
            self::ARCHIVING_DURATION_6,
            self::ARCHIVING_DURATION_10,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('customId', $data ?? [], null);
        $this->setIfExists('customData', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('statusDetail', $data ?? [], null);
        $this->setIfExists('acknowledgementOfReceipt', $data ?? [], null);
        $this->setIfExists('acknowledgementOfReceiptScanning', $data ?? [], null);
        $this->setIfExists('creationDate', $data ?? [], null);
        $this->setIfExists('submissionDate', $data ?? [], null);
        $this->setIfExists('scheduledDate', $data ?? [], null);
        $this->setIfExists('processedDate', $data ?? [], null);
        $this->setIfExists('archiveDate', $data ?? [], null);
        $this->setIfExists('documentsCount', $data ?? [], null);
        $this->setIfExists('documentsWeight', $data ?? [], null);
        $this->setIfExists('pagesCount', $data ?? [], null);
        $this->setIfExists('billedPagesCount', $data ?? [], null);
        $this->setIfExists('sheetsCount', $data ?? [], null);
        $this->setIfExists('recipientsCounts', $data ?? [], null);
        $this->setIfExists('colorPrinting', $data ?? [], null);
        $this->setIfExists('duplexPrinting', $data ?? [], null);
        $this->setIfExists('optionalAddressSheet', $data ?? [], null);
        $this->setIfExists('systemAddressSheet', $data ?? [], null);
        $this->setIfExists('notificationEmail', $data ?? [], null);
        $this->setIfExists('envelopeType', $data ?? [], null);
        $this->setIfExists('senderAddressLine1', $data ?? [], null);
        $this->setIfExists('senderAddressLine2', $data ?? [], null);
        $this->setIfExists('senderAddressLine3', $data ?? [], null);
        $this->setIfExists('senderAddressLine4', $data ?? [], null);
        $this->setIfExists('senderAddressLine5', $data ?? [], null);
        $this->setIfExists('senderAddressLine6', $data ?? [], null);
        $this->setIfExists('senderCountryCode', $data ?? [], null);
        $this->setIfExists('archivingDuration', $data ?? [], null);
        $this->setIfExists('returnEnvelope', $data ?? [], null);
        $this->setIfExists('depositProofDate', $data ?? [], null);
        $this->setIfExists('depositProofUrl', $data ?? [], null);
        $this->setIfExists('depositProofArchiveDate', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getArchivingDurationAllowableValues();
        if (!is_null($this->container['archivingDuration']) && !in_array($this->container['archivingDuration'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'archivingDuration', must be one of '%s'",
                $this->container['archivingDuration'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Identifiant d'un envoi
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Nom d'un envoi
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets customId
     *
     * @return string|null
     */
    public function getCustomId()
    {
        return $this->container['customId'];
    }

    /**
     * Sets customId
     *
     * @param string|null $customId Identifiant de l'envoi défini par le client
     *
     * @return self
     */
    public function setCustomId($customId)
    {
        if (is_null($customId)) {
            throw new \InvalidArgumentException('non-nullable customId cannot be null');
        }
        $this->container['customId'] = $customId;

        return $this;
    }

    /**
     * Gets customData
     *
     * @return string|null
     */
    public function getCustomData()
    {
        return $this->container['customData'];
    }

    /**
     * Sets customData
     *
     * @param string|null $customData Information libre fournie par le client
     *
     * @return self
     */
    public function setCustomData($customData)
    {
        if (is_null($customData)) {
            throw new \InvalidArgumentException('non-nullable customData cannot be null');
        }
        $this->container['customData'] = $customData;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \MailevaApiAdapter\App\Client\LrelClient\Model\SendingStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \MailevaApiAdapter\App\Client\LrelClient\Model\SendingStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets statusDetail
     *
     * @return string|null
     */
    public function getStatusDetail()
    {
        return $this->container['statusDetail'];
    }

    /**
     * Sets statusDetail
     *
     * @param string|null $statusDetail Détail d'un statut (cause du rejet)
     *
     * @return self
     */
    public function setStatusDetail($statusDetail)
    {
        if (is_null($statusDetail)) {
            throw new \InvalidArgumentException('non-nullable statusDetail cannot be null');
        }
        $this->container['statusDetail'] = $statusDetail;

        return $this;
    }

    /**
     * Gets acknowledgementOfReceipt
     *
     * @return bool|null
     */
    public function getAcknowledgementOfReceipt()
    {
        return $this->container['acknowledgementOfReceipt'];
    }

    /**
     * Sets acknowledgementOfReceipt
     *
     * @param bool|null $acknowledgementOfReceipt Avis de réception (AR)
     *
     * @return self
     */
    public function setAcknowledgementOfReceipt($acknowledgementOfReceipt)
    {
        if (is_null($acknowledgementOfReceipt)) {
            throw new \InvalidArgumentException('non-nullable acknowledgementOfReceipt cannot be null');
        }
        $this->container['acknowledgementOfReceipt'] = $acknowledgementOfReceipt;

        return $this;
    }

    /**
     * Gets acknowledgementOfReceiptScanning
     *
     * @return bool|null
     */
    public function getAcknowledgementOfReceiptScanning()
    {
        return $this->container['acknowledgementOfReceiptScanning'];
    }

    /**
     * Sets acknowledgementOfReceiptScanning
     *
     * @param bool|null $acknowledgementOfReceiptScanning Gestion électronique des avis de réception (AR). Cette option indique que Maileva doit recevoir, numériser, mettre en ligne l’image et archiver physiquement les Avis de Réception. Pour cela, la première ligne de l’adresse de l’expéditeur sera conservée, mais les 5 autres lignes et le pays seront remplacés par l’adresse de Maileva. Cette option nécessite que l’option avis de réception soit activée.
     *
     * @return self
     */
    public function setAcknowledgementOfReceiptScanning($acknowledgementOfReceiptScanning)
    {
        if (is_null($acknowledgementOfReceiptScanning)) {
            throw new \InvalidArgumentException('non-nullable acknowledgementOfReceiptScanning cannot be null');
        }
        $this->container['acknowledgementOfReceiptScanning'] = $acknowledgementOfReceiptScanning;

        return $this;
    }

    /**
     * Gets creationDate
     *
     * @return \DateTime|null
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     *
     * @param \DateTime|null $creationDate Date et heure de création
     *
     * @return self
     */
    public function setCreationDate($creationDate)
    {
        if (is_null($creationDate)) {
            throw new \InvalidArgumentException('non-nullable creationDate cannot be null');
        }
        $this->container['creationDate'] = $creationDate;

        return $this;
    }

    /**
     * Gets submissionDate
     *
     * @return \DateTime|null
     */
    public function getSubmissionDate()
    {
        return $this->container['submissionDate'];
    }

    /**
     * Sets submissionDate
     *
     * @param \DateTime|null $submissionDate Date et heure de soumission
     *
     * @return self
     */
    public function setSubmissionDate($submissionDate)
    {
        if (is_null($submissionDate)) {
            throw new \InvalidArgumentException('non-nullable submissionDate cannot be null');
        }
        $this->container['submissionDate'] = $submissionDate;

        return $this;
    }

    /**
     * Gets scheduledDate
     *
     * @return \DateTime|null
     */
    public function getScheduledDate()
    {
        return $this->container['scheduledDate'];
    }

    /**
     * Sets scheduledDate
     *
     * @param \DateTime|null $scheduledDate Date et heure de planification
     *
     * @return self
     */
    public function setScheduledDate($scheduledDate)
    {
        if (is_null($scheduledDate)) {
            throw new \InvalidArgumentException('non-nullable scheduledDate cannot be null');
        }
        $this->container['scheduledDate'] = $scheduledDate;

        return $this;
    }

    /**
     * Gets processedDate
     *
     * @return \DateTime|null
     */
    public function getProcessedDate()
    {
        return $this->container['processedDate'];
    }

    /**
     * Sets processedDate
     *
     * @param \DateTime|null $processedDate Date et heure de production
     *
     * @return self
     */
    public function setProcessedDate($processedDate)
    {
        if (is_null($processedDate)) {
            throw new \InvalidArgumentException('non-nullable processedDate cannot be null');
        }
        $this->container['processedDate'] = $processedDate;

        return $this;
    }

    /**
     * Gets archiveDate
     *
     * @return \DateTime|null
     */
    public function getArchiveDate()
    {
        return $this->container['archiveDate'];
    }

    /**
     * Sets archiveDate
     *
     * @param \DateTime|null $archiveDate Date d'archivage du dernier pli archivable
     *
     * @return self
     */
    public function setArchiveDate($archiveDate)
    {
        if (is_null($archiveDate)) {
            throw new \InvalidArgumentException('non-nullable archiveDate cannot be null');
        }
        $this->container['archiveDate'] = $archiveDate;

        return $this;
    }

    /**
     * Gets documentsCount
     *
     * @return int|null
     */
    public function getDocumentsCount()
    {
        return $this->container['documentsCount'];
    }

    /**
     * Sets documentsCount
     *
     * @param int|null $documentsCount Nombre de documents dans l'envoi
     *
     * @return self
     */
    public function setDocumentsCount($documentsCount)
    {
        if (is_null($documentsCount)) {
            throw new \InvalidArgumentException('non-nullable documentsCount cannot be null');
        }
        $this->container['documentsCount'] = $documentsCount;

        return $this;
    }

    /**
     * Gets documentsWeight
     *
     * @return int|null
     */
    public function getDocumentsWeight()
    {
        return $this->container['documentsWeight'];
    }

    /**
     * Sets documentsWeight
     *
     * @param int|null $documentsWeight Poids du document (en octets)
     *
     * @return self
     */
    public function setDocumentsWeight($documentsWeight)
    {
        if (is_null($documentsWeight)) {
            throw new \InvalidArgumentException('non-nullable documentsWeight cannot be null');
        }
        $this->container['documentsWeight'] = $documentsWeight;

        return $this;
    }

    /**
     * Gets pagesCount
     *
     * @return int|null
     */
    public function getPagesCount()
    {
        return $this->container['pagesCount'];
    }

    /**
     * Sets pagesCount
     *
     * @param int|null $pagesCount Somme du nombre de pages de chaque destinataire. Ce nombre de pages inclut les pages porte-adresse (payantes ou obligatoires) mais n'inclut pas les pages blanches ajoutées au verso par Maileva.
     *
     * @return self
     */
    public function setPagesCount($pagesCount)
    {
        if (is_null($pagesCount)) {
            throw new \InvalidArgumentException('non-nullable pagesCount cannot be null');
        }
        $this->container['pagesCount'] = $pagesCount;

        return $this;
    }

    /**
     * Gets billedPagesCount
     *
     * @return int|null
     */
    public function getBilledPagesCount()
    {
        return $this->container['billedPagesCount'];
    }

    /**
     * Sets billedPagesCount
     *
     * @param int|null $billedPagesCount Nombre de pages facturées (disponible à partir du statut ACCEPTED). Ce nombre de pages inclut les pages porte-adresse payantes (DL) mais n'inclut pas les pages porte-adresse obligatoires (C4) ni les pages blanches ajoutées au verso par Maileva.
     *
     * @return self
     */
    public function setBilledPagesCount($billedPagesCount)
    {
        if (is_null($billedPagesCount)) {
            throw new \InvalidArgumentException('non-nullable billedPagesCount cannot be null');
        }
        $this->container['billedPagesCount'] = $billedPagesCount;

        return $this;
    }

    /**
     * Gets sheetsCount
     *
     * @return int|null
     */
    public function getSheetsCount()
    {
        return $this->container['sheetsCount'];
    }

    /**
     * Sets sheetsCount
     *
     * @param int|null $sheetsCount Somme du nombre de feuilles de chaque destinataire (disponible à partir du statut ACCEPTED). Ce nombre de feuilles inclut les pages porte-adresse (payantes ou obligatoires).
     *
     * @return self
     */
    public function setSheetsCount($sheetsCount)
    {
        if (is_null($sheetsCount)) {
            throw new \InvalidArgumentException('non-nullable sheetsCount cannot be null');
        }
        $this->container['sheetsCount'] = $sheetsCount;

        return $this;
    }

    /**
     * Gets recipientsCounts
     *
     * @return \MailevaApiAdapter\App\Client\LrelClient\Model\RecipientsCounts|null
     */
    public function getRecipientsCounts()
    {
        return $this->container['recipientsCounts'];
    }

    /**
     * Sets recipientsCounts
     *
     * @param \MailevaApiAdapter\App\Client\LrelClient\Model\RecipientsCounts|null $recipientsCounts recipientsCounts
     *
     * @return self
     */
    public function setRecipientsCounts($recipientsCounts)
    {
        if (is_null($recipientsCounts)) {
            throw new \InvalidArgumentException('non-nullable recipientsCounts cannot be null');
        }
        $this->container['recipientsCounts'] = $recipientsCounts;

        return $this;
    }

    /**
     * Gets colorPrinting
     *
     * @return bool|null
     */
    public function getColorPrinting()
    {
        return $this->container['colorPrinting'];
    }

    /**
     * Sets colorPrinting
     *
     * @param bool|null $colorPrinting Impression couleur
     *
     * @return self
     */
    public function setColorPrinting($colorPrinting)
    {
        if (is_null($colorPrinting)) {
            throw new \InvalidArgumentException('non-nullable colorPrinting cannot be null');
        }
        $this->container['colorPrinting'] = $colorPrinting;

        return $this;
    }

    /**
     * Gets duplexPrinting
     *
     * @return bool|null
     */
    public function getDuplexPrinting()
    {
        return $this->container['duplexPrinting'];
    }

    /**
     * Sets duplexPrinting
     *
     * @param bool|null $duplexPrinting Impression recto verso
     *
     * @return self
     */
    public function setDuplexPrinting($duplexPrinting)
    {
        if (is_null($duplexPrinting)) {
            throw new \InvalidArgumentException('non-nullable duplexPrinting cannot be null');
        }
        $this->container['duplexPrinting'] = $duplexPrinting;

        return $this;
    }

    /**
     * Gets optionalAddressSheet
     *
     * @return bool|null
     */
    public function getOptionalAddressSheet()
    {
        return $this->container['optionalAddressSheet'];
    }

    /**
     * Sets optionalAddressSheet
     *
     * @param bool|null $optionalAddressSheet Feuille porte adresse optionnnelle (payante)
     *
     * @return self
     */
    public function setOptionalAddressSheet($optionalAddressSheet)
    {
        if (is_null($optionalAddressSheet)) {
            throw new \InvalidArgumentException('non-nullable optionalAddressSheet cannot be null');
        }
        $this->container['optionalAddressSheet'] = $optionalAddressSheet;

        return $this;
    }

    /**
     * Gets systemAddressSheet
     *
     * @return bool|null
     */
    public function getSystemAddressSheet()
    {
        return $this->container['systemAddressSheet'];
    }

    /**
     * Sets systemAddressSheet
     *
     * @param bool|null $systemAddressSheet Feuille porte adresse imposée (gratuite)
     *
     * @return self
     */
    public function setSystemAddressSheet($systemAddressSheet)
    {
        if (is_null($systemAddressSheet)) {
            throw new \InvalidArgumentException('non-nullable systemAddressSheet cannot be null');
        }
        $this->container['systemAddressSheet'] = $systemAddressSheet;

        return $this;
    }

    /**
     * Gets notificationEmail
     *
     * @return string|null
     */
    public function getNotificationEmail()
    {
        return $this->container['notificationEmail'];
    }

    /**
     * Sets notificationEmail
     *
     * @param string|null $notificationEmail Email de notification
     *
     * @return self
     */
    public function setNotificationEmail($notificationEmail)
    {
        if (is_null($notificationEmail)) {
            throw new \InvalidArgumentException('non-nullable notificationEmail cannot be null');
        }
        $this->container['notificationEmail'] = $notificationEmail;

        return $this;
    }

    /**
     * Gets envelopeType
     *
     * @return \MailevaApiAdapter\App\Client\LrelClient\Model\EnvelopeType|null
     */
    public function getEnvelopeType()
    {
        return $this->container['envelopeType'];
    }

    /**
     * Sets envelopeType
     *
     * @param \MailevaApiAdapter\App\Client\LrelClient\Model\EnvelopeType|null $envelopeType envelopeType
     *
     * @return self
     */
    public function setEnvelopeType($envelopeType)
    {
        if (is_null($envelopeType)) {
            throw new \InvalidArgumentException('non-nullable envelopeType cannot be null');
        }
        $this->container['envelopeType'] = $envelopeType;

        return $this;
    }

    /**
     * Gets senderAddressLine1
     *
     * @return string|null
     */
    public function getSenderAddressLine1()
    {
        return $this->container['senderAddressLine1'];
    }

    /**
     * Sets senderAddressLine1
     *
     * @param string|null $senderAddressLine1 Ligne d'adresse n°1 (Société) de l'expéditeur
     *
     * @return self
     */
    public function setSenderAddressLine1($senderAddressLine1)
    {
        if (is_null($senderAddressLine1)) {
            throw new \InvalidArgumentException('non-nullable senderAddressLine1 cannot be null');
        }
        $this->container['senderAddressLine1'] = $senderAddressLine1;

        return $this;
    }

    /**
     * Gets senderAddressLine2
     *
     * @return string|null
     */
    public function getSenderAddressLine2()
    {
        return $this->container['senderAddressLine2'];
    }

    /**
     * Sets senderAddressLine2
     *
     * @param string|null $senderAddressLine2 Ligne d'adresse n°2 (Civilité, Prénom, Nom) de l'expéditeur
     *
     * @return self
     */
    public function setSenderAddressLine2($senderAddressLine2)
    {
        if (is_null($senderAddressLine2)) {
            throw new \InvalidArgumentException('non-nullable senderAddressLine2 cannot be null');
        }
        $this->container['senderAddressLine2'] = $senderAddressLine2;

        return $this;
    }

    /**
     * Gets senderAddressLine3
     *
     * @return string|null
     */
    public function getSenderAddressLine3()
    {
        return $this->container['senderAddressLine3'];
    }

    /**
     * Sets senderAddressLine3
     *
     * @param string|null $senderAddressLine3 Ligne d'adresse n°3 (Résidence, Bâtiement ...) de l'expéditeur
     *
     * @return self
     */
    public function setSenderAddressLine3($senderAddressLine3)
    {
        if (is_null($senderAddressLine3)) {
            throw new \InvalidArgumentException('non-nullable senderAddressLine3 cannot be null');
        }
        $this->container['senderAddressLine3'] = $senderAddressLine3;

        return $this;
    }

    /**
     * Gets senderAddressLine4
     *
     * @return string|null
     */
    public function getSenderAddressLine4()
    {
        return $this->container['senderAddressLine4'];
    }

    /**
     * Sets senderAddressLine4
     *
     * @param string|null $senderAddressLine4 Ligne d'adresse n°4 (N° et libellé de la voie) de l'expéditeur
     *
     * @return self
     */
    public function setSenderAddressLine4($senderAddressLine4)
    {
        if (is_null($senderAddressLine4)) {
            throw new \InvalidArgumentException('non-nullable senderAddressLine4 cannot be null');
        }
        $this->container['senderAddressLine4'] = $senderAddressLine4;

        return $this;
    }

    /**
     * Gets senderAddressLine5
     *
     * @return string|null
     */
    public function getSenderAddressLine5()
    {
        return $this->container['senderAddressLine5'];
    }

    /**
     * Sets senderAddressLine5
     *
     * @param string|null $senderAddressLine5 Ligne d'adresse n°5 (Lieu dit, BP...) de l'expéditeur
     *
     * @return self
     */
    public function setSenderAddressLine5($senderAddressLine5)
    {
        if (is_null($senderAddressLine5)) {
            throw new \InvalidArgumentException('non-nullable senderAddressLine5 cannot be null');
        }
        $this->container['senderAddressLine5'] = $senderAddressLine5;

        return $this;
    }

    /**
     * Gets senderAddressLine6
     *
     * @return string|null
     */
    public function getSenderAddressLine6()
    {
        return $this->container['senderAddressLine6'];
    }

    /**
     * Sets senderAddressLine6
     *
     * @param string|null $senderAddressLine6 Ligne d'adresse n°6 (Code postal et ville) de l'expéditeur
     *
     * @return self
     */
    public function setSenderAddressLine6($senderAddressLine6)
    {
        if (is_null($senderAddressLine6)) {
            throw new \InvalidArgumentException('non-nullable senderAddressLine6 cannot be null');
        }
        $this->container['senderAddressLine6'] = $senderAddressLine6;

        return $this;
    }

    /**
     * Gets senderCountryCode
     *
     * @return \MailevaApiAdapter\App\Client\LrelClient\Model\CountryCode|null
     */
    public function getSenderCountryCode()
    {
        return $this->container['senderCountryCode'];
    }

    /**
     * Sets senderCountryCode
     *
     * @param \MailevaApiAdapter\App\Client\LrelClient\Model\CountryCode|null $senderCountryCode senderCountryCode
     *
     * @return self
     */
    public function setSenderCountryCode($senderCountryCode)
    {
        if (is_null($senderCountryCode)) {
            throw new \InvalidArgumentException('non-nullable senderCountryCode cannot be null');
        }
        $this->container['senderCountryCode'] = $senderCountryCode;

        return $this;
    }

    /**
     * Gets archivingDuration
     *
     * @return int|null
     */
    public function getArchivingDuration()
    {
        return $this->container['archivingDuration'];
    }

    /**
     * Sets archivingDuration
     *
     * @param int|null $archivingDuration Durée d'archivage en années
     *
     * @return self
     */
    public function setArchivingDuration($archivingDuration)
    {
        if (is_null($archivingDuration)) {
            throw new \InvalidArgumentException('non-nullable archivingDuration cannot be null');
        }
        $allowedValues = $this->getArchivingDurationAllowableValues();
        if (!in_array($archivingDuration, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'archivingDuration', must be one of '%s'",
                    $archivingDuration,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['archivingDuration'] = $archivingDuration;

        return $this;
    }

    /**
     * Gets returnEnvelope
     *
     * @return \MailevaApiAdapter\App\Client\LrelClient\Model\ReturnEnvelopeOutput|null
     */
    public function getReturnEnvelope()
    {
        return $this->container['returnEnvelope'];
    }

    /**
     * Sets returnEnvelope
     *
     * @param \MailevaApiAdapter\App\Client\LrelClient\Model\ReturnEnvelopeOutput|null $returnEnvelope returnEnvelope
     *
     * @return self
     */
    public function setReturnEnvelope($returnEnvelope)
    {
        if (is_null($returnEnvelope)) {
            throw new \InvalidArgumentException('non-nullable returnEnvelope cannot be null');
        }
        $this->container['returnEnvelope'] = $returnEnvelope;

        return $this;
    }

    /**
     * Gets depositProofDate
     *
     * @return string|null
     */
    public function getDepositProofDate()
    {
        return $this->container['depositProofDate'];
    }

    /**
     * Sets depositProofDate
     *
     * @param string|null $depositProofDate Date de la preuve de dépôt
     *
     * @return self
     */
    public function setDepositProofDate($depositProofDate)
    {
        if (is_null($depositProofDate)) {
            throw new \InvalidArgumentException('non-nullable depositProofDate cannot be null');
        }
        $this->container['depositProofDate'] = $depositProofDate;

        return $this;
    }

    /**
     * Gets depositProofUrl
     *
     * @return string|null
     */
    public function getDepositProofUrl()
    {
        return $this->container['depositProofUrl'];
    }

    /**
     * Sets depositProofUrl
     *
     * @param string|null $depositProofUrl Lien de téléchargement de la preuve de dépôt
     *
     * @return self
     */
    public function setDepositProofUrl($depositProofUrl)
    {
        if (is_null($depositProofUrl)) {
            throw new \InvalidArgumentException('non-nullable depositProofUrl cannot be null');
        }
        $this->container['depositProofUrl'] = $depositProofUrl;

        return $this;
    }

    /**
     * Gets depositProofArchiveDate
     *
     * @return string|null
     */
    public function getDepositProofArchiveDate()
    {
        return $this->container['depositProofArchiveDate'];
    }

    /**
     * Sets depositProofArchiveDate
     *
     * @param string|null $depositProofArchiveDate Date d'archivage de la preuve de dépôt
     *
     * @return self
     */
    public function setDepositProofArchiveDate($depositProofArchiveDate)
    {
        if (is_null($depositProofArchiveDate)) {
            throw new \InvalidArgumentException('non-nullable depositProofArchiveDate cannot be null');
        }
        $this->container['depositProofArchiveDate'] = $depositProofArchiveDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


